// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Purchase
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Purchase\PurchaseRequisition.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/PurchaseRequisition")]
    public partial class PurchaseRequisition : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 392 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Purchase\PurchaseRequisition.razor"
       

    private List<PurchaseRequisitionEntity> Customers { get; set; }
    PurchaseRequisitionEntity purchaseRequisition = new PurchaseRequisitionEntity();
    List<PurchaseRequisitionDetailsEntity> requisitionDetailsEntities = new List<PurchaseRequisitionDetailsEntity>();
    PurchaseRequisitionDetailsEntity details = new PurchaseRequisitionDetailsEntity();
    PurchaseRequisitionOthersModel reqOthers = new PurchaseRequisitionOthersModel();
    List<PurchaseRequisitionOthersModel> reqOthersList = new List<PurchaseRequisitionOthersModel>();
    List<DepartmentEntity> departmentList = new List<DepartmentEntity>();
    List<ItemEntity> productList = new List<ItemEntity>();
    private ItemEntity SelectedArticle;
    List<OrderItemEntity> requestItemList = new List<OrderItemEntity>();
    List<OthersRequisitionItemsModel> othersItemList = new List<OthersRequisitionItemsModel>();
    OthersRequisitionItemsModel othersItem = new OthersRequisitionItemsModel();
    string searchitem = "";
    OrderItemEntity orderitem;
    OrderItemEntity order_itm = null;
    BlazoredTextEditor itemDescription;
    decimal quantity =0;
    decimal unitPrice =0;
    string itemname = "";
    double requisitionTotal = 0;
    double othersSubTotal = 0;
    //DateTime request_date = System.DateTime.Now;
    string request_date;
    string require_date;
    int tablerow;
    string selected_department;
    int selected_department_Id;
    string cheque_Date;
    bool checked_cheque;
    decimal GrandTotal;
    decimal LC_AMOUNT;
    decimal LC_COMMISSION;
    decimal INSURANCE;
    string Inwords;
    string othersItemName;
    decimal othersitemQuantity;
    decimal OthersitemRate;
    string reqNo;
    protected bool REQ_IS_DISABLE { get; set; }
    public List<PlanandOperationViewModel> ShoppingCart;
    string errorMessage;
    string testDate;
    decimal TotalAmount;
    decimal Others_Total;

    protected override async Task OnInitializedAsync()
    {
        tablerow = 1;
        //itemname = itemname + "_" + tablerow;
        await DepartmentList();
        await GetItemList();
        //await GetReqNo();

        await JSRuntime.InvokeVoidAsync("JsInteropDatepicker");


    }

    private async Task GetItemList()
    {
        productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product");
    }


    private async Task<IEnumerable<ItemEntity>> SearchArticles(string searchText)
    {
        searchitem = searchText;
        return await Task.FromResult(productList.Where(x => x.ITEM_NAME.ToLower().Contains(searchText.ToLower())));
    }
    private async Task DepartmentList()
    {
        departmentList = await Http.GetJsonAsync<List<DepartmentEntity>>(Utility.BaseUrl + "api/Department");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await JSRuntime.InvokeVoidAsync("JsInteropDatepicker");
    }
    private void Add()
    {
        tablerow = tablerow + 1;
        itemname = itemname + "_" + tablerow;
        StateHasChanged();
    }
    protected async Task AddItem()
    {
        if (IsValidation_Table_Item() != true)
        {
            bool alreadyExists = productList.Any(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim());
            order_itm = new OrderItemEntity();
            order_itm.ITEM_NAME = itemname;
            order_itm.ITEM_DESCRIPTION = await this.itemDescription.GetHTML();
            order_itm.Quantity = Convert.ToDouble(quantity);
            order_itm.Rate = Convert.ToDouble(unitPrice);

            if (alreadyExists == true)
            {
                order_itm.ITEM_ID = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).ITEM_ID;
                order_itm.PACK_SIZE = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).PACK_SIZE;
                order_itm.UOM = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).UOM;
            }
            else
            {
                order_itm.ITEM_ID = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Purchase/GetItemId/" + itemname);
            }

            order_itm.Total = Convert.ToDouble(order_itm.Quantity) * Convert.ToDouble(order_itm.Rate);
            requisitionTotal += order_itm.Total;
            requestItemList.Add(order_itm);

            quantity =0;
            unitPrice=0;
            itemname = "";
            TotalAmount = 0;
            StateHasChanged();
            TotalCalculation();
        }


    }
    protected async Task AddOthersItem()
    {
        othersItem = new OthersRequisitionItemsModel();
        othersItem.OTHERS_ITEM = othersItemName;
        if (othersitemQuantity != null && othersitemQuantity !=0)
        { othersItem.QUANTITY = Convert.ToDouble(othersitemQuantity); }
        else { othersItem.QUANTITY = 0; }

        othersItem.RATE = Convert.ToDouble(OthersitemRate);
        if (othersitemQuantity != null && othersitemQuantity !=0 && othersitemQuantity !=0) { othersItem.TOTAL = Convert.ToDouble(othersitemQuantity) * Convert.ToDouble(OthersitemRate); }
        else { othersItem.TOTAL = Convert.ToDouble(OthersitemRate); }

        othersSubTotal += othersItem.TOTAL;
        othersItemList.Add(othersItem);
        othersItemName = "";
        othersitemQuantity = 0;
        OthersitemRate =0;
        TotalCalculation();
    }
    public async void DeleteOthersItem(string item)
    {
        var itemToRemove = othersItemList.Single(r => r.OTHERS_ITEM == item);
        othersItemList.Remove(itemToRemove);
        if (othersItemList.Count > 0)
        {
            othersSubTotal = 0;
            foreach (var _oitem in othersItemList)
            {
                othersSubTotal += _oitem.TOTAL;
            }
        }
        else { othersSubTotal = 0; }

        TotalCalculation();
        StateHasChanged();
    }
    //--------------
    public async void DeleteItem(string item)
    {
        var itemToRemove = requestItemList.Single(r => r.ITEM_NAME == item);
        requestItemList.Remove(itemToRemove);
        if (requestItemList.Count > 0)
        {
            requisitionTotal = 0;
            foreach (var _oitem in requestItemList)
            {
                requisitionTotal += _oitem.Total;
            }
        }
        else { requisitionTotal = 0; }

        TotalCalculation();
        StateHasChanged();
    }
    public async void EditItem(string item)
    {
        itemname = requestItemList.Single(r => r.ITEM_NAME == item).ITEM_NAME;
        quantity = Convert.ToDecimal(requestItemList.Single(r => r.ITEM_NAME == item).Quantity);
        unitPrice= Convert.ToDecimal(requestItemList.Single(r => r.ITEM_NAME == item).Rate);
        var itemToRemove = requestItemList.Single(r => r.ITEM_NAME == item);
        requestItemList.Remove(itemToRemove);
        if (requestItemList.Count > 0)
        {
            requisitionTotal = 0;
            foreach (var _oitem in requestItemList)
            {
                requisitionTotal += _oitem.Total;
            }
        }
        else { requisitionTotal = 0; }
        TotalCalculation();
        StateHasChanged();
    }
    //
    public async void EditOthersItem(string item)
    {
        othersItemName = othersItemList.Single(r => r.OTHERS_ITEM == item).OTHERS_ITEM;
        othersitemQuantity = Convert.ToDecimal(othersItemList.Single(r => r.OTHERS_ITEM == item).QUANTITY);
        OthersitemRate = Convert.ToDecimal(othersItemList.Single(r => r.OTHERS_ITEM == item).RATE);
        var itemToRemove = othersItemList.Single(r => r.OTHERS_ITEM == item);
        othersItemList.Remove(itemToRemove);
        if (othersItemList.Count > 0)
        {
            othersSubTotal = 0;
            foreach (var _oitem in othersItemList)
            {
                othersSubTotal += _oitem.TOTAL;
            }
        }
        else { othersSubTotal = 0; }
        TotalCalculation();
        StateHasChanged();
    }
    public async Task GetReqNo()
    {
        //var reqNo = await Http.GetJsonAsync<RequisitionNo>(Utility.BaseUrl + "api/Purchase/GetReqNo");
        reqNo = await Http.GetStringAsync(Utility.BaseUrl + "api/Purchase/GetReqNo");
        //purchaseRequisition.REQUISITION_NO = Convert.ToString(reqNo);


        string dName = departmentList.Find(x => x.DEPARTMENT_ID == purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID).DEPARTMENT_NAME;
        if (dName == "Accounts & Finance")
        {
            reqNo = reqNo + "AF";
            purchaseRequisition.REQUISITION_NO = reqNo;
        }
        else { purchaseRequisition.REQUISITION_NO = reqNo; }

        //REQ_IS_DISABLE = true;
        //StateHasChanged();


    }

    public async Task SavePurchaseRequision()
    {

        if (IsValidation() != true)
        {
            try
            {
                await GetReqNo();
                purchaseRequisition.REQUEST_DATE = System.DateTime.Now;
                purchaseRequisition.REQUIRED_DATE = require_date;
                purchaseRequisition.REQUISITION_TOTAL = requisitionTotal;
                //purchaseRequisition.REQUISITION_NO = reqNo;
                purchaseRequisition.REQUESTED_BY = await sessionStorage.GetItemAsync<string>("session_employeeName");
                purchaseRequisition.STATUS = "Open";
                purchaseRequisition.REG_BY = await sessionStorage.GetItemAsync<string>("session_employeeName");
                purchaseRequisition.REQUEST_DEPARTMENT_ID = await sessionStorage.GetItemAsync<int>("session_employeeDepartmentId");
                var data = await Http.PostJsonAsync<PurchaseRequisitionEntity>(Utility.BaseUrl + "api/Purchase", purchaseRequisition);
                var id = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Purchase/GetPurchaseRequisitionId/" + purchaseRequisition.REQUISITION_NO);
                foreach (var item in requestItemList)
                {
                    details = new PurchaseRequisitionDetailsEntity();
                    details.PURCHASE_REQUISITION_ID = id;
                    details.REQUISITION_NO = purchaseRequisition.REQUISITION_NO;
                    details.ITEM_ID = item.ITEM_ID;
                    details.QUANTITY = item.Quantity;
                    details.RATE = item.Rate;
                    details.PACK_SIZE = item.PACK_SIZE;
                    details.UOM = item.UOM;
                    requisitionDetailsEntities.Add(details);
                }
                var requisition_details = await Http.PostJsonAsync<List<PurchaseRequisitionDetailsEntity>>(Utility.BaseUrl + "api/Purchase/AddPurchaseRequisitionDetails", requisitionDetailsEntities);
                foreach (var othersItem in othersItemList)
                {
                    reqOthers = new PurchaseRequisitionOthersModel();
                    reqOthers.PURCHASE_REQUISITION_ID = id;
                    reqOthers.REQUISITION_NO = purchaseRequisition.REQUISITION_NO;
                    reqOthers.OTHERS_ITEM = othersItem.OTHERS_ITEM;
                    reqOthers.QUANTITY = othersItem.QUANTITY;
                    reqOthers.RATE = othersItem.RATE;
                    reqOthersList.Add(reqOthers);
                }
                var requisition_Others = await Http.PostJsonAsync<List<PurchaseRequisitionOthersModel>>(Utility.BaseUrl + "api/Purchase/AddPurchaseRequisitionOthers", reqOthersList);
                toastService.ShowSuccess("Requisition Generate Successfully!!!");
                purchaseRequisition = new PurchaseRequisitionEntity();
                details = new PurchaseRequisitionDetailsEntity();
                reqOthers = new PurchaseRequisitionOthersModel();
            }
            catch (Exception ex)
            {
                errorMessage = "Data Not Save !" + ex.Message;
                toastService.ShowError(errorMessage);
            }

        }
    }
    private async Task quantity_clicked(ChangeEventArgs args)
    {
        if (args.Value != "")
        {
            quantity = Convert.ToDecimal(Convert.ToDecimal(args.Value));
        }
        else { quantity = 0; }
        Calculation();
    }
    private async Task unitPrice_clicked(ChangeEventArgs args)
    {
        if (args.Value != "")
        {
            unitPrice = Convert.ToDecimal(Convert.ToDecimal(args.Value));
        }
        else { unitPrice = 0; }
        Calculation();
    }
    private void Calculation()
    {
        decimal total = unitPrice * quantity;
        decimal others_total = othersitemQuantity * OthersitemRate;
        Others_Total= Convert.ToDecimal(String.Format("{0:0.00}", others_total));
        TotalAmount = Convert.ToDecimal(String.Format("{0:0.00}", total));
        StateHasChanged();
    }
    private async Task Others_Quantity_Clicked(ChangeEventArgs args)
    {
        if (args.Value != "")
        {
            othersitemQuantity = Convert.ToDecimal(Convert.ToDecimal(args.Value));
        }
        else { othersitemQuantity = 0; }
        Calculation();
    }
    private async Task Ohters_UnitPrice_Clicked(ChangeEventArgs args)
    {
        if (args.Value != "")
        {
            OthersitemRate = Convert.ToDecimal(Convert.ToDecimal(args.Value));
        }
        else { OthersitemRate = 0; }
        Calculation();
    }

    private bool IsValidation_Table_Item()
    {
        bool flag = false;
        if (itemname == "" || itemname == string.Empty || itemname == null)
        {
            toastService.ShowWarning("Please Select Item!");
            flag = true;
        }
        else if (quantity == null && quantity==0)
        {
            toastService.ShowWarning("Quantity Field is Empty!");
            flag = true;
        }
        else if (unitPrice == null || unitPrice ==0)
        {
            toastService.ShowWarning("Unit Price Field is Empty!");
            flag = true;
        }
        return flag;
    }


    private bool IsValidation()
    {
        bool flag = false;
        //if (purchaseRequisition.REQUISITION_NO == "" || purchaseRequisition.REQUISITION_NO == string.Empty || purchaseRequisition.REQUISITION_NO == null)
        //{
        //    toastService.ShowWarning("Requisition No cannot be empty!");
        //    flag = true;
        //}
        //else if (purchaseRequisition.REQUESTED_BY == "" || purchaseRequisition.REQUESTED_BY == string.Empty || purchaseRequisition.REQUESTED_BY == null)
        //{
        //    toastService.ShowWarning("Requested By cannot be empty!");
        //    flag = true;
        //}
        //else if (purchaseRequisition.REQUEST_DEPARTMENT_ID == 0)
        //{
        //    toastService.ShowWarning("Please Select Department");
        //    flag = true;
        //}
        //else if (requestItemList.Count == 0)
        //{
        //    toastService.ShowWarning("Please Select Requisition Item");
        //    flag = true;
        //}

        return flag;
    }
    private void ClearData()
    {
        purchaseRequisition.REQUISITION_NO = "";
        purchaseRequisition.REQUESTED_BY = "";
        //purchaseRequisition.REQUEST_DATE = System.DateTime.Now;
        //purchaseRequisition.REQUIRED_DATE = System.DateTime.Now;
        purchaseRequisition.REQUEST_FOR = "";
        purchaseRequisition.REQUISITION_PURPOSE = "";
        requestItemList = null;

    }
    private async Task Requesst_Receive_Dept_Click(ChangeEventArgs changeEventArgs)
    {

        selected_department_Id = Convert.ToInt32(changeEventArgs.Value);
        selected_department = departmentList.Find(x => x.DEPARTMENT_ID == selected_department_Id).DEPARTMENT_NAME;
        StateHasChanged();
    }
    private async Task LC_Amount_Clicked(ChangeEventArgs lcAmount)
    {
        if (lcAmount.Value.ToString() != "0" && lcAmount.Value.ToString() != null && lcAmount.Value.ToString() != "")
        {
            LC_AMOUNT = Convert.ToDecimal(lcAmount.Value.ToString());
            TotalCalculation();
        }
        else
        {
            LC_AMOUNT = 0;
            TotalCalculation();
        }


    }
    private async Task LC_Commission_Clicked(ChangeEventArgs lcCommission)
    {
        if (lcCommission.Value.ToString() != "0" && lcCommission.Value.ToString() != null && lcCommission.Value.ToString() != "")
        {
            LC_COMMISSION = Convert.ToDecimal(lcCommission.Value.ToString());
            TotalCalculation();
        }
        else
        {
            LC_COMMISSION = 0;
            TotalCalculation();
        }

    }
    private async Task Insurance_Clicked(ChangeEventArgs Insurance)
    {
        if (Insurance.Value.ToString() != "0" && Insurance != null && Insurance.Value.ToString() != "")
        {
            INSURANCE = Convert.ToDecimal(Insurance.Value.ToString());
            TotalCalculation();
        }
        else
        {
            INSURANCE = 0;
            TotalCalculation();
        }

    }

    async void PaymentMode_ChequeClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            checked_cheque = true;
            purchaseRequisition.PAYMENT_MODE = "Cheque";
        }
        else
        {
            checked_cheque = false;
            cheque_Date = "";
            purchaseRequisition.PAYMENT_MODE = "";
        }
        StateHasChanged();
    }
    //PaymentMode_PayorderClicked(
    //PaymentMode_TTClicked( event
    //PaymentMode_InAdvanceClicked
    //PaymentMode_OthersClicked(e
    async void PaymentMode_CashClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Cash"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }

    }
    async void PaymentMode_PayorderClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Payorder"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_TTClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "TT"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_InAdvanceClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "InAdvance"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_OthersClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Others"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    private void TotalCalculation()
    {
        //if (requisitionTotal != 0 || requisitionTotal != null)
        //{ GrandTotal = Convert.ToDecimal(requisitionTotal); }
        //if(LC_AMOUNT!=0||LC_AMOUNT!=null)
        //{ GrandTotal= }

        GrandTotal = Convert.ToDecimal(requisitionTotal) + LC_AMOUNT + LC_COMMISSION + INSURANCE + Convert.ToDecimal(othersSubTotal);
        double inwordValue = Convert.ToDouble(GrandTotal);
        Inwords = NumberToWords.ConvertAmount(inwordValue);
    }
    private Task OnValueChanged(int value)
    {
        // Assign the selected value to the Model
        purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID = Convert.ToInt32(value);
        return Task.CompletedTask;
    }
    private async Task ReceiveDepartmentClicked(ChangeEventArgs changeEvent)
    {
        int changeId = Convert.ToInt32(changeEvent.Value.ToString());
        purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID = changeId;

    }



#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedLocalStorage ProtectedLocalStore { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
