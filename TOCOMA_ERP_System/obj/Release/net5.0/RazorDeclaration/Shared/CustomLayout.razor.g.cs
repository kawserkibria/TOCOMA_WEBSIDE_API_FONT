// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
    public partial class CustomLayout : LayoutComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 990 "F:\Project\Company All Project\TocomaERP\Project\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\Shared\CustomLayout.razor"
       
    IJSObjectReference module;
    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    private IJSObjectReference _jsModule;
    public static string employeeName;
    public static string employeeDesignation;
    public static string employeeDepartment;
    public static string loginId;

    string ReportType;
    List<ACC_Trial_Balance_Report> trialBalanceReport = new List<ACC_Trial_Balance_Report>();
    List<ACC_PROFIT_LOSS> profitAndLossReport = new List<ACC_PROFIT_LOSS>();
    List<ACC_Balance_Sheet_Report> balanceSheetReport = new List<ACC_Balance_Sheet_Report>();
    string fromdate;
    string todate;
    string currentDate;
    EmployeeModel empModel = new EmployeeModel();

    protected override async Task OnInitializedAsync()
    {
        loginId = await sessionStorage.GetItemAsync<string>("session_employeeLoginId");
        employeeName = await sessionStorage.GetItemAsync<string>("session_employeeName");
        empModel.EMPLOYEE_ID = await sessionStorage.GetItemAsync<string>("session_employeeId");
        employeeDesignation = await sessionStorage.GetItemAsync<string>("session_employeeDesignation");
        employeeDepartment = await sessionStorage.GetItemAsync<string>("session_employeeDepartment");
        currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
        empModel = await Http.GetJsonAsync<EmployeeModel>(Utility.BaseUrl + "api/Employee/GetEmployeeById/" + empModel.EMPLOYEE_ID);


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("JsInteropcollaps");
            //await ijsruntime.InvokeAsync<string>(
            //    "QuillFunctions.createQuill", divEditorElement);


        }

    }

    public async Task GetTrialBalance(string Type)
    {

        //int type = 4;
        string REFNO = "1234";

        int tpe = 1;
        if (fromdate == null)
        { fromdate = currentDate; }
        if (todate == null)
        { todate = currentDate; }
        try
        {
            if (ReportType == "Trial Balance")
            {
                //trialBalanceReport = new List<ACC_Trial_Balance_Report>();
                //string url = Utility.BaseUrl + "api/Transection/GetTrialBalanceInfo/" + fromdate+"/"+ todate;
                //string url = Utility.BaseUrl + "api/Transection/GetTrialBalanceInfo/" + "20220801" + "/" + "20220911";
                //string url = Utility.BaseUrl + "api/Transection/GetTrialBalanceInfo";
                trialBalanceReport = new List<ACC_Trial_Balance_Report>();

                trialBalanceReport = await Http.GetJsonAsync<List<ACC_Trial_Balance_Report>>(Utility.BaseUrl + "api/Transection/GetTrialBalanceInfo/" + fromdate + "/" + todate);
                //trialBalanceReport = await Http.GetJsonAsync<List<ACC_Trial_Balance_Report>>(url);
                SessionData.From_date = fromdate;
                SessionData.To_date = todate;
                SessionData.trialBalanceList = trialBalanceReport;
                await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetTrialBalanceReport", "_blank");
            }
            else if (ReportType == "Balance Sheet")
            {
                //await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetBalanceSheetReport/" + REFNO + "/" + tpe, "_blank");
                balanceSheetReport = new List<ACC_Balance_Sheet_Report>();
                balanceSheetReport = await Http.GetJsonAsync<List<ACC_Balance_Sheet_Report>>(Utility.BaseUrl + "api/Transection/GetBalanceSheet/" + fromdate + "/" + todate);
                SessionData.From_date = fromdate;
                SessionData.To_date = todate;
                SessionData.balanceSheetList = balanceSheetReport;
                await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetBalanceSheetReport", "_blank");
            }
            else if (ReportType == "Profit & Loss")
            {

                //await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetProfitLossReport/" + REFNO + "/" + tpe, "_blank");
                profitAndLossReport = new List<ACC_PROFIT_LOSS>();
                profitAndLossReport = await Http.GetJsonAsync<List<ACC_PROFIT_LOSS>>(Utility.BaseUrl + "api/Transection/GetProfitAndLoss/" + fromdate + "/" + todate);
                //decimal income = profitAndLossReport.Sum(x => Convert.ToDecimal(x.));
                decimal income = profitAndLossReport.Where(p => p.GR_PRIMARY_TYPE == "Income" && p.GR_NAME != "Total Income").Sum(p => Convert.ToDecimal(p.GR_AMOUNT));
                decimal expense = profitAndLossReport.Where(p => p.GR_PRIMARY_TYPE == "Expenses" && p.GR_NAME != "Total Expense").Sum(p => Convert.ToDecimal(p.GR_AMOUNT));
                decimal TotalProfitLoss = income - expense;
                SessionData.TotalProfitLoss = TotalProfitLoss;
                SessionData.From_date = fromdate;
                SessionData.To_date = todate;
                SessionData.profitAndLossList = profitAndLossReport;
                await JSRuntime.InvokeAsync<object>("open", "api/RDLCReport/GetProfitLossReport", "_blank");
            }
        }
        catch (Exception EX)
        {

        }


    }
    public async Task Logout()
    {
        await sessionStorage.RemoveItemAsync("session_employeeLoginId");
        UriHelper.NavigateTo("/", true);
    }
    private async void GetFromDate(ChangeEventArgs change)
    {
        fromdate = change.Value.ToString();
        //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(date);
    }
    private async void GetToDate(ChangeEventArgs change)
    {
        todate = change.Value.ToString();
        //accCompanyVoucherModel.COMP_VOUCHER_DATE = Convert.ToDateTime(date);
    }
    private void ReportTypeClick(int Type)
    {
        if (Type == 1)
        { ReportType = "Trial Balance"; }
        else if (Type == 2)
        { ReportType = "Balance Sheet"; }
        else if (Type == 3)
        { ReportType = "Profit & Loss"; }
    }
    void Requisition() { UriHelper.NavigateTo("PurchaseRequisition"); }
    void ManageRequisition() { UriHelper.NavigateTo("ManageRequisition"); }
    void SendRFQ() { UriHelper.NavigateTo("SendRFQList"); }
    void RequisitionList() { UriHelper.NavigateTo("RequisitionList"); }
    void POList() { UriHelper.NavigateTo("PurchaseOrderList"); }
    void POTrackingList() { UriHelper.NavigateTo("PurchaseOrderTracking"); }
    void AddCustomer() { UriHelper.NavigateTo("AddCustomer"); }
    void AddItem() { UriHelper.NavigateTo("NewProduct"); }
    void AddBrand() { UriHelper.NavigateTo("AddBrand"); }
    void AddVendor() { UriHelper.NavigateTo("AddVendor"); }
    void VendorList() { UriHelper.NavigateTo("ManageVendor"); }
    void AddBank() { UriHelper.NavigateTo("AddBank"); }
    void AddBranch() { UriHelper.NavigateTo("AddBranch"); }
    void PurchaseReport() { UriHelper.NavigateTo("PurchaseReport"); }
    void SupplierAccount() { UriHelper.NavigateTo("SupplierReport"); }
    void SupplierAccountSummery() { UriHelper.NavigateTo("SupplierAccountSummery"); }
    void SupplierPaymentStatement() { UriHelper.NavigateTo("SupplierPaymentStatement"); }
    void ProductReveiveinWarehouse() { UriHelper.NavigateTo("ProductReceive"); }
    void VendorPaymentClicked() { UriHelper.NavigateTo("VendorPaymentList"); }
    void VendorListClicked() { UriHelper.NavigateTo("VendorList"); }
    void StockSummeryClicked() { UriHelper.NavigateTo("StockSummery"); }
    
    void StockStatementClicked() { UriHelper.NavigateTo("StockStatement"); }
    void GetCustomers() { UriHelper.NavigateTo("Customers"); }
    void ReportsClicked() { UriHelper.NavigateTo("Reports"); }
    void PlanningClicked() { UriHelper.NavigateTo("PlanningWorkScheduleList"); }
    void NewSalesQuotation() { UriHelper.NavigateTo("SalesQuotation"); }
    void SalesQuotationList() { UriHelper.NavigateTo("QuotationList"); }
    void SalesOrderClicked() { UriHelper.NavigateTo("SalesOrder"); }
    void SalesOrderListClicked() { UriHelper.NavigateTo("SalesOrderList"); }
    void SalesOrderTrackingListClicked() { UriHelper.NavigateTo("SalesOrderTracking"); }
    void EmployeeAttendance() { UriHelper.NavigateTo("Attendance"); }
    void UnitClicked() { UriHelper.NavigateTo("AddUnit"); }
    void ApplicationAreaClicked() { UriHelper.NavigateTo("ApplicationArea"); }
    void NewProductClicked() { UriHelper.NavigateTo("NewProduct"); }
    void ProductListClicked() { UriHelper.NavigateTo("ItemList"); }
    void NewCategoryClicked() { UriHelper.NavigateTo("NewCategory"); }
    void CountryClicked() { UriHelper.NavigateTo("Country"); }
    void BankClicked() { UriHelper.NavigateTo("BankInfo"); }
    void BranchClicked() { UriHelper.NavigateTo("BranchInfo"); }
    void BrandClicked() { UriHelper.NavigateTo("AddBrand"); }
    void ColorClicked() { UriHelper.NavigateTo("AddColor"); }
    void InventoryTypeClicked() { UriHelper.NavigateTo("InventoryType"); }
    void BranchNameClicked() { UriHelper.NavigateTo("BranchList"); }
    void CurrencyClicked() { UriHelper.NavigateTo("Currency"); }
    void LadgerGroupClicked() { UriHelper.NavigateTo("LadgerGroup"); }
    void LedgerClicked() { UriHelper.NavigateTo("Ledgers"); }
    void PaymentClicked() { UriHelper.NavigateTo("PaymentVoucherList"); }
    void ReceiveClicked() { UriHelper.NavigateTo("ReceiveVoucherList"); }
    void JournalClicked() { UriHelper.NavigateTo("JournalVoucherList"); }
    void ContraClicked() { UriHelper.NavigateTo("ContraVoucherList"); }
    void PurchaseforProject() { UriHelper.NavigateTo("PurchaseforProject"); }
    void DailyPurchaseListforProject() { UriHelper.NavigateTo("DailyPurchaseForProject"); }
    void StockSummaryForProject() { UriHelper.NavigateTo("StockSummary"); }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager UriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime JsRuntime { get; set; }
    }
}
#pragma warning restore 1591
