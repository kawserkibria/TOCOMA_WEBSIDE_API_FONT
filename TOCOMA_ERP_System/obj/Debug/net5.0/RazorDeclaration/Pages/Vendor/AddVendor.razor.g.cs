// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Vendor
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/AddVendor")]
    public partial class AddVendor : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 638 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Vendor\AddVendor.razor"
       
    BankBranchModel branch = new BankBranchModel();
    List<BankModel> bankList = new List<BankModel>();
    List<BankBranchModel> branchList = new List<BankBranchModel>();
    VendorEntity vendor = new VendorEntity();
    CustomerContactModel customerContactModel = new CustomerContactModel();
    List<CustomerContactModel> customerContactList = new List<CustomerContactModel>();
    CustomerContactModel customerContact = new CustomerContactModel();
    List<DepartmentEntity> departmentList = new List<DepartmentEntity>();
    List<CustomerContactModel> ContactList = new List<CustomerContactModel>();
    string vendorCode;


    protected override async Task OnInitializedAsync()
    {
        //var data = await Http.GetJsonAsync<object>(Utility.BaseUrl + "api/Report/GetTest");
        //var data = await Http.GetJsonAsync<object>("https://localhost:44386/Home/CreateReport");
        await GetBankList();
        departmentList = await Http.GetJsonAsync<List<DepartmentEntity>>(Utility.BaseUrl + "api/Department");
    }
    private async Task GetBankList()
    {
        bankList = await Http.GetJsonAsync<List<BankModel>>(Utility.BaseUrl + "api/Bank");
    }
    protected async Task SelectedBank(ChangeEventArgs changeEvent)
    {
        int bankId = Convert.ToInt32(changeEvent.Value.ToString());
        vendor.BANK_ID = bankId;
        branchList = await Http.GetJsonAsync<List<BankBranchModel>>(Utility.BaseUrl + "api/Bank/GetBranchList/" + bankId);
        StateHasChanged();
    }
    protected async Task SelectedBranch(ChangeEventArgs branchevent)
    {
        int branchId = Convert.ToInt32(branchevent.Value.ToString());
        vendor.BANK_BRANCH_ID = branchId;
        branch = await Http.GetJsonAsync<BankBranchModel>(Utility.BaseUrl + "api/Bank/GetBranchInfo/" + branchId);
        vendor.BANK_KEY_ROUTING_NUMBER = branch.ROUTING_NUMBER;
        vendor.BRANCH_ADDRESS = branch.BRANCH_ADDRESS;
        vendor.POSTAL_CODE = branch.POSTAL_CODE;
        vendor.SWIFT_CODE = branch.SWIFT_CODE;
        StateHasChanged();
    }
    public async Task SaveVendor()
    {

        if (IsValidation() != true)
        {
            try
            {
                vendorCode = await Http.GetStringAsync(Utility.BaseUrl + "api/Customer/GetCustomerCode/"+"V");
                vendor.VENDOR_CODE= vendorCode;
                var data = await Http.PostJsonAsync<VendorEntity>(Utility.BaseUrl + "api/Vendor", vendor);
                foreach (var item in customerContactList)
                {
                    customerContactModel = new CustomerContactModel();
                    customerContactModel.CUSTOMER_VENDOR_CODE = vendorCode;
                    customerContactModel.NAME = item.NAME;
                    customerContactModel.DESIGNATION = item.DESIGNATION;
                    customerContactModel.DEPARTMENT_NAME = item.DEPARTMENT_NAME;
                    customerContactModel.MOBILE = item.MOBILE;
                    customerContactModel.EMAIL = item.EMAIL;
                    customerContactModel.WECHAT = item.WECHAT;
                    customerContactModel.WHATSAPP = item.WHATSAPP;
                    customerContactModel.TYPE = item.TYPE;

                    ContactList.Add(customerContactModel);
                }

                var customercontact = await Http.PostJsonAsync<List<CustomerContactModel>>(Utility.BaseUrl + "api/Customer/AddCustomerContact", ContactList);
                toastService.ShowSuccess("Insert Successfully!!!");
            }
            catch (Exception ex)
            {

            }

        }
    }
    private bool IsValidation()
    {
        bool flag = false;
        if (vendor.VENDOR_NAME == "" || vendor.VENDOR_NAME == string.Empty || vendor.VENDOR_NAME == null)
        {
            toastService.ShowWarning("Vendor Name is empty!");
            flag = true;
        }
        else if (vendor.REGISTERED_ADDRESS == "" || vendor.REGISTERED_ADDRESS == string.Empty || vendor.REGISTERED_ADDRESS == null)
        {
            toastService.ShowWarning("Register Address field is Empty!");
            flag = true;
        }


        return flag;
    }
    async void Incorporation_Certificate_Yes(object checkedValue)
    {
        vendor.INCORPORATION_CERTIFICATE_STATUS = "Yes";
    }
    async void Incorporation_Certificate_No(object checkedValue)
    {
        vendor.INCORPORATION_CERTIFICATE_STATUS = "No";
    }

    async void Company_Profile_Brochur_Yes(object checkedValue)
    {
        vendor.COMPANY_PROFILE_BROCHUR_STATUS = "Yes";
    }
    async void Company_Profile_Brochur_No(object checkedValue)
    {
        vendor.COMPANY_PROFILE_BROCHUR_STATUS = "No";
    }
    async void Trade_License_Yes(object checkedValue)
    {
        vendor.TRADE_LICENSE_STATUS = "Yes";
    }
    async void Trade_License_No(object checkedValue)
    {
        vendor.TRADE_LICENSE_STATUS = "No";
    }
    async void TIN_Certificate_Yes(object checkedValue)
    {
        vendor.TIN_CERTIFICATE_STATUS = "Yes";
    }
    async void TIN_Certificate_No(object checkedValue)
    {
        vendor.TIN_CERTIFICATE_STATUS = "No";
    }
    async void VAT_Registration_Certificate_Yes(object checkedValue)
    {
        vendor.VAT_REGISTRATION_CERTIFICATE_STATUS = "Yes";
    }
    async void VAT_Registration_Certificate_No(object checkedValue)
    {
        vendor.VAT_REGISTRATION_CERTIFICATE_STATUS = "No";
    }
    async void Environment_Clearance_Certificate_Yes(object checkedValue)
    {
        vendor.ENVIRONMENT_CLEARANCE_CERTIFICATE_STATUS = "Yes";
    }
    async void Environment_Clearance_Certificate_No(object checkedValue)
    {
        vendor.ENVIRONMENT_CLEARANCE_CERTIFICATE_STATUS = "No";
    }
    async void CheckboxLocal(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            vendor.VENDOR_TYPE_STATUS = "Local";
        }
    }
    async void CheckboxInternational(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            vendor.VENDOR_TYPE_STATUS = "International";
        }
    }
    private async Task Cancel()
    {
        vendor = new VendorEntity();
    }
    public async Task AddCustomerContact()
    {
        customerContactModel = new CustomerContactModel();
        customerContactModel.NAME = customerContact.NAME;
        customerContactModel.DESIGNATION = customerContact.DESIGNATION;
        customerContactModel.DEPARTMENT_NAME = customerContact.DEPARTMENT_NAME;
        //customerContactModel.DEPARTMENT_NAME = departmentList.Find(x => x.DEPARTMENT_ID == customerContact.DEPARTMENT_ID).DEPARTMENT_NAME;
        customerContactModel.MOBILE = customerContact.MOBILE;
        customerContactModel.EMAIL = customerContact.EMAIL;
        customerContactModel.WECHAT = customerContact.WECHAT;
        customerContactModel.WHATSAPP = customerContact.WHATSAPP;
        customerContactModel.TYPE ="V";

        customerContactList.Add(customerContactModel);
        StateHasChanged();


    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
