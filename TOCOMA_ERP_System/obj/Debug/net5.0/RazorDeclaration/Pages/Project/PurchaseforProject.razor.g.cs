// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.Pages.Project
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Project\PurchaseforProject.razor"
using Blazored.Typeahead;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/PurchaseforProject")]
    public partial class PurchaseforProject : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 245 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\Pages\Project\PurchaseforProject.razor"
       
    PurchaseOrderModel porderModel = new PurchaseOrderModel();
    List<VendorEntity> vendorList = new List<VendorEntity>();
    List<UnitModel> unitList = new List<UnitModel>();

    string vendor_name;
    LedgerModel ledger = new LedgerModel();
    List<ItemEntity> itemNameList = new List<ItemEntity>();
    List<BranchModel> branchList = new List<BranchModel>();
    string MyProperty;
    List<string> itemList = new List<string>();
    List<CountryModel> countryList = new List<CountryModel>();
    private PurchaseOrderDetailsEntity SelectedArticle;
    private string newTodo;
    List<PurchaseOrderDetailsEntity> voucherItemList = new List<PurchaseOrderDetailsEntity>();
    PurchaseOrderDetailsEntity itemdetails = new PurchaseOrderDetailsEntity();
    VoucherItem paymentvoucher = new VoucherItem();
    ACC_COMPANY_VOUCHER_MODEL accCompanyVoucherModel = new ACC_COMPANY_VOUCHER_MODEL();
    List<PurchaseOrderDetailsEntity> paymentVoucherDetails = new List<PurchaseOrderDetailsEntity>();
    ACC_VOUCHER_MODEL voucherDetails = new ACC_VOUCHER_MODEL();
    string voucherNo;

    decimal amount;
    string KeyPressed = "";
    public string Value { get; set; }
    public string MyDrValue { get; set; }
    public string MyCrValue { get; set; }

    double Qty { get; set; }
    decimal Rate { get; set; }
    public decimal totalAmount { get; set; }

    private ElementReference myref;
    private ElementReference myDr_ref;
    private ElementReference myCr_ref;
    private ElementReference narrationref;
    private bool isDrDisable { get; set; }
    private bool isCrDisable { get; set; }
    decimal totalDebit;
    decimal totalCredit;
    int visibletext;
    string BranchName;
    string voucherDate;
    string narration;
    int bankStatus = 0;
    List<string> templates = new List<string>() { "Maui", "Hawaii", "Niihau", "Kauai", "Kahoolawe" };
    string SelectedString = "Maui";
    string parent;
    string chequeNo;
    string drawnon;
    string voucherChequedate = "";
    string currentDate;
    string selected_date;
    string itemName;
    string supplierName;
    decimal GrandTotal;
    decimal transport_cost;
    decimal labour_cost;
    decimal others_cost;
    string unitName;
    int unitId;



    protected override async Task OnInitializedAsync()
    {
        MyProperty = "Dr";
        onDisable(MyProperty);
        accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 1);
        //await GetCountry();
        await GetLedger();
        //await GetBranch();
        itemNameList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product/GetProjectItem");
        unitList = await Http.GetJsonAsync<List<UnitModel>>(Utility.BaseUrl + "api/Setup/GetUnit");
        vendorList = await Http.GetJsonAsync<List<VendorEntity>>(Utility.BaseUrl + "api/Vendor");
        currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
        //currentDate = System.DateTime.Now.Day.ToString().PadLeft(2, '0')+"/"+ (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + System.DateTime.Now.Year ;
        StateHasChanged();

    }
    async void selectedledger(ChangeEventArgs e)
    {
        SelectedString = e.Value.ToString();
        if (SelectedString == "Bank Accounts") { bankStatus = 1; }
        else { bankStatus = 0; }
        if (MyProperty == "Dr")
        { await myDr_ref.FocusAsync(); }
        else if (MyProperty == "Cr")
        { await myCr_ref.FocusAsync(); }
    }
    public async Task GetBranch()
    {
        branchList = await Http.GetJsonAsync<List<BranchModel>>(Utility.BaseUrl + "api/Setup/GetBranchList");
        if (branchList.Count > 0)
        { BranchName = branchList.FirstOrDefault().BRANCH_NAME; }


    }
    private async Task GetLedger()
    {
        //ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");
    }
    //private async Task GetCountry()
    //{
    //    countryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
    //}
    private void ItemNameClicked(ChangeEventArgs changeEventArgs)
    {
        itemName = changeEventArgs.Value.ToString();
    }
    private void SupplierNameClicked(ChangeEventArgs changeEventArgs)
    {
        supplierName = changeEventArgs.Value.ToString();
    }
    private void rateClicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "") { Rate = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { Rate = 0; }
        totalAmount = Convert.ToDecimal(Convert.ToDecimal(Qty) * Convert.ToDecimal(Rate));
        //GetTotal();
        //ADJ = Convert.ToDouble(changeEventArgs.Value.ToString());
    }
    private void TransportClicked(ChangeEventArgs changeEventArgs)
    {
        //double sum = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));
        //finaltotal = finaltotal + Convert.ToDouble(changeEventArgs.Value.ToString());
        if (changeEventArgs.Value.ToString() != "") { transport_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { transport_cost = 0; }
        GetTotal();
        //ADJ = Convert.ToDouble(changeEventArgs.Value.ToString());
    }
    private void LabourClicked(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value.ToString() != "") { labour_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { labour_cost = 0; }
        GetTotal();
    }
    private void OthersClicked(ChangeEventArgs changeEventArgs)
    {
        if (changeEventArgs.Value.ToString() != "") { others_cost = Convert.ToDecimal(changeEventArgs.Value.ToString()); }
        else { others_cost = 0; }
        GetTotal();
    }
    private void GetTotal()
    {
        //if(AIT== 0 && VAT==0 && ADJ==0)
        //{ finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate)); }
        //finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate));

        //if (Rate !="")
        //{
        //    totalAmount = Convert.ToDecimal(Convert.ToDecimal(Qty)* Convert.ToDecimal(Rate));
        //}

        //if (VAT != 0)
        //{ finaltotal = finaltotal + VAT; }
        //if (ADJ != 0)
        //{ finaltotal = finaltotal + ADJ; }
        //if (SeaFreight != 0)
        //{ finaltotal = finaltotal + SeaFreight; }
        //double inwordValue = Convert.ToDouble(finaltotal);
        // Inwords = NumberToWords.ConvertAmount(inwordValue);
        //else { finaltotal = requestItemList.Sum(x => Convert.ToDouble(x.Quantity) * Convert.ToDouble(x.Rate)); }
        decimal t = voucherItemList.Sum(x => Convert.ToDecimal(x.QUANTITY) * Convert.ToDecimal(x.UNIT_PRICE));
        GrandTotal = t + transport_cost + labour_cost + others_cost;

    }

    private async Task<IEnumerable<ItemEntity>> SearchLedger(string searchText)
    {


        return await Task.FromResult(itemNameList.Where(x => x.ITEM_NAME.ToLower().Contains(searchText.ToLower())).ToList());

        //return await Task.FromResult(ledgerList);
    }
    //private async Task<IEnumerable<LedgerModel>> KeyPressLedger(string searchText)
    //{
    //    //return await Task.FromResult(ledgerList.Where(x => x.LEDGER_NAME.ToLower().Contains(searchText.ToLower())).ToList());


    //}

    public async Task SavePaymentVoucher()
    {
        //if (IsValidation() != true)
        //{
        //bool exists = voucherItemList.Exists(x => x.ITEM_NAME == "Cr");
        //if (exists != true)
        //{
        //    toastService.ShowWarning("Please Add Credit Info In List");
        //    return;
        //}
        if (voucherNo == "")
        {
            toastService.ShowWarning("Please Add Voucher No.");
            return;
        }
        else
        {
            if (!await jsruntime.InvokeAsync<bool>("confirm", $"Do you want to save ?"))
                return;


            try
            {

                if (selected_date == "" || selected_date == null)
                { porderModel.PO_DATE = Convert.ToDateTime(currentDate).Day.ToString().PadLeft(2, '0')+"/"+ Convert.ToDateTime(currentDate).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(currentDate).Year; }

                //accCompanyVoucherModel.BRANCH_ID = branchList.Find(x => x.BRANCH_NAME == BranchName).BRANCH_ID;
                //accCompanyVoucherModel.LEDGER_NAME = voucherItemList.FirstOrDefault().particular;
                porderModel.BUSINESS_ID = 2;
                porderModel.VOUCHER_NO = voucherNo;
                porderModel.VENDOR_NAME = supplierName;
                porderModel.DEPARTMENT_NAME = BranchName;
                porderModel.CARRING_WAY_COST = transport_cost;
                porderModel.LABOUR_COST = labour_cost;
                porderModel.OTHERS_COST = others_cost;
                porderModel.GRAND_TOTAL = Convert.ToDouble(GrandTotal);




                if (voucherItemList != null)
                {
                    foreach (var item in voucherItemList)
                    {
                        itemdetails = new PurchaseOrderDetailsEntity();
                        //itemdetails.PO_NUMBER_LONG_CODE = voucherNo;
                        itemdetails.ITEM_NAME = item.ITEM_NAME;
                        itemdetails.UNIT_ID = item.UNIT_ID;
                        itemdetails.QUANTITY = item.QUANTITY;
                        itemdetails.UNIT_PRICE = item.UNIT_PRICE;
                        itemdetails.TOTAL_AMOUNT = item.TOTAL_AMOUNT;

                        //voucherDetails.LEDGER_NAME = item.particular;
                        //voucherDetails.VOUCHER_DEBIT_AMOUNT = item.debitAmount;
                        //voucherDetails.VOUCHER_CREDIT_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_ADD_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_LESS_AMOUNT = item.creditAmount;
                        //voucherDetails.VOUCHER_TOBY = item.symbol;
                        //voucherDetails.VOUCHER_FC_DEBIT_AMOUNT = 0;
                        //voucherDetails.VOUCHER_FC_CREDIT_AMOUNT = 0;
                        //if (item.ChequeNo != "" && item.ChequeNo != null && item.ChequeNo != "NULL")
                        //{
                        //    voucherDetails.VOUCHER_CHEQUE_NUMBER = item.ChequeNo;
                        //    voucherDetails.VOUCHER_CHEQUE_DATE = item.ChequeDate;
                        //    voucherDetails.VOUCHER_CHEQUE_DRAWN_ON = item.DrawnOn;
                        //}
                        //paymentVoucherDetails.Add(itemdetails);
                        if (porderModel.pOrderDetailsList == null)
                        { porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>(); }
                        porderModel.pOrderDetailsList.Add(itemdetails);
                    }
                    //var voucher = await Http.PostJsonAsync<List<ACC_VOUCHER_MODEL>>(Utility.BaseUrl + "api/Transection/AddPaymentVoucherDetails", paymentVoucherDetails);
                    var data = await Http.PostJsonAsync<PurchaseOrderModel>(Utility.BaseUrl + "api/Purchase/AddPurchaseForProject", porderModel);
                    toastService.ShowSuccess("Save Successfully!!!");
                    //if (data.status == true)
                    //{
                    //    toastService.ShowSuccess("Save Successfully!!!");
                    //    await LoadPage();
                    //}
                    //else { toastService.ShowError("Not Save : " + data.ErrorMessage); }
                    voucherItemList = new List<PurchaseOrderDetailsEntity>();
                    porderModel = new PurchaseOrderModel();
                    porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>();
                    voucherNo = "";
                    currentDate = System.DateTime.Now.Year + "-" + (System.DateTime.Now.Month).ToString().PadLeft(2, '0') + "-" + System.DateTime.Now.Day.ToString().PadLeft(2, '0');
                }
                else
                {
                    toastService.ShowWarning("No Item For Purchase!");
                }
            }

            catch (Exception ex)
            {
                voucherItemList = new List<PurchaseOrderDetailsEntity>();
                porderModel = new PurchaseOrderModel();
                porderModel.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>();
            }
        }


    }
    private async Task LoadPage()
    {
        await GetVoucherNo();
        // voucherItemList = new List<VoucherItem>();
        visibletext = 0;
        MyProperty = "Dr";
        totalDebit = 0;
        totalCredit = 0;
        onDisable(MyProperty);
        StateHasChanged();
    }
    private async Task GetVoucherNo()
    {
        accCompanyVoucherModel.COMP_REF_NO = await Http.GetStringAsync(Utility.BaseUrl + "api/Transection/GetVoucherNo/" + 1);
    }
    private void Keypress(KeyboardEventArgs args)
    {
        string value;
        value = args.Key;
        itemName = value;
        //if (value == "c" || value == "C")
        //{ MyProperty = "Cr"; }
        //else if (value == "d" || value == "D")
        //{ MyProperty = "Dr"; }
        //StateHasChanged();
        //onDisable(MyProperty);
    }
    private void onDisable(string property)
    {
        if (property == "Dr")
        {
            this.isDrDisable = false;
            this.isCrDisable = true;
            MyCrValue = "";
        }
        else if (property == "Cr")
        {
            this.isCrDisable = false;
            this.isDrDisable = true;
        }

    }

    private async Task GetSelectedValue(ChangeEventArgs change)
    {
        if (change.Value.ToString() == "Bank Accounts") { bankStatus = 1; }
    }
    //private void Enter(KeyboardEventArgs e)
    //private void Enter()
    //{
    //    //if (e.Key == "Enter")
    //    {
    //        if (!string.IsNullOrWhiteSpace(newTodo))
    //        {
    //            //todos.Add(new TodoItem { Title = newTodo });
    //            //newTodo = string.Empty;
    //        }
    //    }
    //}
    private void UnitClicked(ChangeEventArgs change)
    {
        unitId = Convert.ToInt32(change.Value.ToString());
        unitName = unitList.Find(x => x.UNIT_ID == unitId).UNIT_NAME;
    }
    private async void DoTheThing(KeyboardEventArgs eventArgs)
    {
        if (eventArgs.Key == "Enter")
        {
            int u = unitId;//itemdetails.UNIT_ID;

            itemdetails = new PurchaseOrderDetailsEntity();
            itemdetails.ITEM_NAME = itemName;
            itemdetails.UNIT_ID = u; //unitId;
            itemdetails.UOM = unitList.Find(x => x.UNIT_ID == unitId).UNIT_NAME;//unitName;

            itemdetails.QUANTITY = Convert.ToDouble(Qty);
            itemdetails.UNIT_PRICE = Convert.ToDouble(Rate);
            itemdetails.TOTAL_AMOUNT = Convert.ToString(totalAmount);

            voucherItemList.Add(itemdetails);


            GetTotal();

            itemName = "";
            Qty = 0;
            Rate = 0;
            totalAmount = 0;
            unitId =0;
            unitName = "";
            //itemdetails.UNIT_ID =0;


            //paymentvoucher.symbol = MyProperty;
            //paymentvoucher.particular = SelectedString; //SelectedArticle.LEDGER_NAME;
            //if (paymentvoucher.particular == "" || paymentvoucher.particular == null)
            //{
            //    toastService.ShowWarning("Please Add Particular");
            //}
            //else
            //{
            //    //if (MyProperty == "Dr")
            //    //{
            //    //    paymentvoucher.debitAmount = Convert.ToDecimal(MyDrValue);
            //    //}
            //    //if (MyProperty == "Cr")
            //    //{
            //    //    paymentvoucher.creditAmount = Convert.ToDecimal(MyCrValue);
            //    //}
            //    //if (chequeNo != "" && chequeNo != null)
            //    //{
            //    //    paymentvoucher.ChequeNo = chequeNo;
            //    //    paymentvoucher.ChequeDate = Convert.ToDateTime(voucherChequedate);
            //    //    paymentvoucher.DrawnOn = drawnon;

            //    //}
            //    //else
            //    //{
            //    //    paymentvoucher.ChequeNo = "NULL";
            //    //    paymentvoucher.ChequeDate = Convert.ToDateTime("1900-01-01");
            //    //    paymentvoucher.DrawnOn = "NULL";
            //    //}




            //    //totalDebit = voucherItemList.Sum(item => item.debitAmount);
            //    //totalCredit = voucherItemList.Sum(item => item.debitAmount); //voucherItemList.Sum(item => item.creditAmount);


            //    //bool exists = voucherItemList.Exists(x => x.symbol == "Cr");

            //    //if (exists != true)
            //    //{
            //    //    MyProperty = "Cr";
            //    //    //double total = myList.Sum(item => item.Amount);
            //    //    MyCrValue = Convert.ToString(voucherItemList.Sum(item => item.debitAmount));
            //    //    //SelectedArticle.LEDGER_NAME = "";
            //    //    //SelectedString = "";
            //    //    MyDrValue = "";
            //    //    bankStatus = 0;
            //    //    chequeNo = "";
            //    //    drawnon = "";

            //    //    onDisable(MyProperty);
            //    //    await myref.FocusAsync();

            //    //}
            //    //else
            //    //{
            //    //    visibletext = 1;
            //    //    StateHasChanged();
            //    //    MyProperty = "";
            //    //    //SelectedArticle.LEDGER_NAME = "";
            //    //    SelectedString = "";
            //    //    MyDrValue = "";
            //    //    MyCrValue = "";
            //    //    bankStatus = 0;
            //    //    chequeNo = "";
            //    //    drawnon = "";

            //    //    await narrationref.FocusAsync();
            //    //}
            //}
        }
    }
    //public void Enter(KeyboardEventArgs e)
    //{
    //    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //    {
    //        // ...
    //        KeyPressed = "Key Pressed is " + this.Value;

    //        //amount = e.Key;
    //        paymentvoucher = new VoucherItem();
    //        paymentvoucher.symbol = MyProperty;
    //        paymentvoucher.particular = SelectedArticle.LEDGER_NAME;
    //        if (MyProperty == "Dr")
    //        {
    //            paymentvoucher.debitAmount = amount;
    //        }
    //        if (MyProperty == "Cr")
    //        {
    //            paymentvoucher.creditAmount = amount;
    //        }

    //        voucherItemList.Add(paymentvoucher);



    //    }
    //}
    //public class VoucherItem
    //{
    //    public string symbol { get; set; }
    //    public string particular { get; set; }
    //    public decimal debitAmount { get; set; }
    //    public decimal creditAmount { get; set; }
    //    public string ChequeNo { get; set; }
    //    //public DateTime ChequeDate { get; set; }
    //    public Nullable<DateTime> ChequeDate { get; set; }

    //    public string DrawnOn { get; set; }
    //}
    private async void GetDate(ChangeEventArgs change)
    {
        selected_date = change.Value.ToString();
        porderModel.PO_DATE = Convert.ToDateTime(selected_date).Day.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(selected_date).Month.ToString().PadLeft(2, '0') + "/" + Convert.ToDateTime(selected_date).Year;
    }

    private async void GetChequeDate(ChangeEventArgs change)
    {
        voucherChequedate = change.Value.ToString();

    }
    void CloseClicked() { UriHelper.NavigateTo("PaymentVoucherList"); }
    private void SelectItem(string item)
    {
        itemName = item;

    }
    private void SelectSupplierItem(string item)
    {
        supplierName = item;

    }
    public async void DeleteItem(string item)
    {
        var itemToRemove = voucherItemList.Single(r => r.ITEM_NAME == item);
        voucherItemList.Remove(itemToRemove);
        GetTotal();



        StateHasChanged();
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager UriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime jsruntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
