// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TOCOMA_ERP_System.PlanningAndOperation
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_ClassLibrary.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Blazored.Toast.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Controller;

#line default
#line hidden
#nullable disable
#nullable restore
#line 15 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.ProtectedBrowserStorage;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using TOCOMA_ERP_System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\_Imports.razor"
using Microsoft.AspNetCore.Hosting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\PlanningAndOperation\PlanningWorkScheduleList.razor"
using AspNetCore.Reporting;

#line default
#line hidden
#nullable disable
#nullable restore
#line 14 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\PlanningAndOperation\PlanningWorkScheduleList.razor"
using System.Reflection;

#line default
#line hidden
#nullable disable
#nullable restore
#line 16 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\PlanningAndOperation\PlanningWorkScheduleList.razor"
using Microsoft.AspNetCore.Mvc;

#line default
#line hidden
#nullable disable
#nullable restore
#line 17 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\PlanningAndOperation\PlanningWorkScheduleList.razor"
using System.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 18 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\PlanningAndOperation\PlanningWorkScheduleList.razor"
using System.Text;

#line default
#line hidden
#nullable disable
#nullable restore
#line 25 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\PlanningAndOperation\PlanningWorkScheduleList.razor"
using System.Text.Json;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.LayoutAttribute(typeof(CustomLayout))]
    [Microsoft.AspNetCore.Components.RouteAttribute("/PlanningWorkScheduleList")]
    public partial class PlanningWorkScheduleList : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 396 "G:\TOCOMA\TOCOMA_ERP_System\TOCOMA_ERP_System\PlanningAndOperation\PlanningWorkScheduleList.razor"
       
    List<PlanandOperationViewModel> planAndOperationList = new List<PlanandOperationViewModel>();
    List<PlanandOperationViewModel> listPlanOperation = new List<PlanandOperationViewModel>();
    List<DepartmentEntity> departmentList = new List<DepartmentEntity>();
    List<PlanAndWorkScheduleStatusModel> statusList = new List<PlanAndWorkScheduleStatusModel>();
    List<EmployeeModel> employeeList = new List<EmployeeModel>();
    string itemname = "";
    int empId = 0;
    int departId = 0;
    int roleId = 0;
    int statusId = 0;
    int departmentId = 0;
    int planandworkId;
    BlazoredTextEditor taskDescription;
    BlazoredTextEditor action;
    BlazoredTextEditor remarks;
    PlanAndOperationModel planAndOperation = new PlanAndOperationModel();
    string QuillContent;//= "<p>This is My Comments</p><p>					 Asaduzzaman</p><p>Work on progress</p><p>   				 Dola Barua</p>";
    int plan_duration;
    int actual_duration;
    private string strSavedContent = "";
    private string EditorHTMLContent;
    private string EditorContent;
    public int pageSize { get; set; }
    public int TotalPage { get; set; }
    public int Currentpage { get; set; }
    public int StartNumber { get; set; }
    public int EndNumber { get; set; }
    [CascadingParameter]
    public EventCallback notify { get; set; }
    private string value { get; set; }
    private System.Data.DataTable dt;
    //private readonly RdlcReportController rdlcreport;
    SessionData session;
    string btnText;
    SessionDataArea PlanSessionData { get; set; }
    private const string planAndWorkSchedule = "planAndWorkList";
    List<PlanandOperationViewModel> plan = new List<PlanandOperationViewModel>();
    string myname;


    protected override async Task OnInitializedAsync()
    {
        await notify.InvokeAsync();

        departmentList = await Http.GetJsonAsync<List<DepartmentEntity>>(Utility.BaseUrl + "api/Department");
        //var employeeId = await storage.GetAsync<int>("session_employeeId");

        employeeList = await Http.GetJsonAsync<List<EmployeeModel>>(Utility.BaseUrl + "api/Employee");
        //var departmentId = await storage.GetAsync<int>("session_employeeDepartmentId");//await sessionStorage.GetItemAsync<string>("ID")
        //await sessionStorage.GetItemAsync<string>("ID")
        //departId = Convert.ToInt32(departmentId);
        //departId = state.Department_Id;
        //departId = await sessionStorage.GetItemAsync<int>("session_employeeDepartmentId");
        statusList = await Http.GetJsonAsync<List<PlanAndWorkScheduleStatusModel>>(Utility.BaseUrl + "api/Setup/GetPlanAndWorkStatus");
        roleId = 1;//await sessionStorage.GetItemAsync<int>("session_userRoleId");

        await GetDataOnLoad();
        Pagination();

    }
    private async Task GetDataOnLoad()
    {
        if (roleId != 1)
        {

            planAndOperationList = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkSchedule/" + departId);
            listPlanOperation = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkSchedule/" + departId);
        }
        else
        {
            planAndOperationList = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkScheduleBySuperAdmin");
            listPlanOperation = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkScheduleBySuperAdmin");
        }
        GetDataForPrint();
    }
    public async void SetHTML()
    {
        string QuillContent = "<p>This is My Comments</p><p>					 Asaduzzaman</p><p>Work on progress</p><p>   				 Dola Barua</p>";



        await this.taskDescription.LoadHTMLContent(QuillContent);
        StateHasChanged();
    }
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{

    //    await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    //    //departId = await sessionStorage.GetItemAsync<int>("session_employeeDepartmentId");
    //    StateHasChanged();
    //    //await notify.InvokeAsync();
    //}
    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        departId = await sessionStorage.GetItemAsync<int>("session_employeeDepartmentId");//await sessionStorage.GetItemAsync<string>("ID")
    //                                                                                          //departId = Convert.ToInt32(departmentId);
    //        planAndOperation = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkSchedule/" + departId);
    //        //var employeeId = await storage.GetAsync<int>("session_employeeId");
    //        //var departmentId = await storage.GetAsync<int>("session_employeeDepartmentId");
    //        //empId = employeeId.Value;
    //        //departId = departmentId.Value;
    //        //planAndOperation = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkSchedule/" + empId + "/" + departId);
    //        StateHasChanged();
    //    }
    //}
    public void RedirectToAssignWork()
    {
        UriHelper.NavigateTo("/AssignWork");
    }

    protected async void DepartmentClicked(Microsoft.AspNetCore.Components.ChangeEventArgs changeEventArgs)
    {
        departmentId = Convert.ToInt32(changeEventArgs.Value.ToString());
        //await GetSearchItem();
        this.StateHasChanged();
    }
    protected async void StatusClicked(Microsoft.AspNetCore.Components.ChangeEventArgs changeEventArgs)
    {
        statusId = Convert.ToInt32(changeEventArgs.Value.ToString());
        //await GetSearchItem( );
        this.StateHasChanged();
    }

    private async Task GetSearchItem(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        value = (string)args.Value;
        string param = "";
        string WhereCondition = "";
        if (value != "")
        {
            if (param != "")
            {
                if (roleId != 1)
                { param = param + " AND PS.TASK_DESCRIPTION LIKE '%" + value + "%'  AND PS.DEPARTMENT_ID=" + departId + " OR D.DEPARTMENT_NAME LIKE '%" + value + "%' AND PS.DEPARTMENT_ID=" + departId + " "; }
                else { param = param + " AND PS.TASK_DESCRIPTION LIKE '%" + value + "%'  OR D.DEPARTMENT_NAME LIKE '%" + value + "%'"; }

            }
            else
            {
                //param = param + "  PS.TASK_DESCRIPTION LIKE '%" + value + "%'  OR D.DEPARTMENT_NAME LIKE '%" + value + "%'";

                if (roleId != 1)
                { param = param + "  PS.TASK_DESCRIPTION LIKE '%" + value + "%'  AND PS.DEPARTMENT_ID=" + departId + " OR D.DEPARTMENT_NAME LIKE '%" + value + "%' AND PS.DEPARTMENT_ID=" + departId + " "; }
                else { param = param + "  PS.TASK_DESCRIPTION LIKE '%" + value + "%'  OR D.DEPARTMENT_NAME LIKE '%" + value + "%'"; }
            }
        }
        if (departmentId != 0)
        {
            if (param != "")
            {
                param = param + " AND PS.DEPARTMENT_ID=" + departmentId + "";
            }
            else
            {
                param = param + "  PS.DEPARTMENT_ID=" + departmentId + "";
            }
        }
        if (statusId != 0)
        {
            if (param != "")
            {
                param = param + " AND S.STATUS_ID=" + statusId + "";
            }
            else
            {
                param = param + "  S.STATUS_ID=" + statusId + "";
            }
        }

        if (param != "")
        {
            //if (roleId != 1)
            //{ WhereCondition = "WHERE " + param + " AND D.DEPARTMENT_ID = "+ departId + ""; }
            //else { WhereCondition = "WHERE " + param; }
            WhereCondition = "WHERE " + param;

            planAndOperationList = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkScheduleBySearchOption/" + WhereCondition);
            listPlanOperation = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkScheduleBySearchOption/" + WhereCondition);
            GetDataForPrint();
        }
        else
        {
            await GetDataOnLoad();
        }


        Pagination();
        StateHasChanged();
    }
    private void GetDataForPrint()
    {
        AppState.GetPlanList = listPlanOperation;
    }
    private async Task EditPlanAndWork(int Id)
    {
        planandworkId = Id;
        btnText = "Update";
        planAndOperation = await Http.GetJsonAsync<PlanAndOperationModel>(Utility.BaseUrl + "api/Setup/GetPlanAndWorkScheduleById/" + Id);
        QuillContent = planAndOperation.TASK_DESCRIPTION;
        await this.taskDescription.LoadHTMLContent(QuillContent);
        await this.action.LoadHTMLContent(planAndOperation.ACTIVITIES);
        await this.remarks.LoadHTMLContent(planAndOperation.COMMENTS);
        StateHasChanged();
    }
    private async Task DeletePlanAndWork(int Id)
    {
        if (!await JsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
            return;
        await Http.DeleteAsync(Utility.BaseUrl + "api/Setup/DeletePlanAndWorkScheduleById/" + Id);
        await GetDataOnLoad();
        Pagination();
    }
    public async Task Save()
    {
        if (IsValidation() != true)
        {
            if (btnText == "Save")
            {
                try
                {

                    //ACTUAL_COMPLETION_DATE = Convert.ToDateTime(changeEvent.Value.ToString());
                    //days = (ACTUAL_COMPLETION_DATE - ACTUAL_START_DATE).Days;

                    //planAndOperation.PLANNED_START_DATE = Convert.ToDateTime(date); //PLANNED_START_DATE;

                    //planAndOperation.ACTUAL_START_DATE = ACTUAL_START_DATE;
                    //planAndOperation.PLANNED_COMPLETION_DATE = PLANNED_COMPLETION_DATE;
                    //planAndOperation.ACTUAL_COMPLETION_DATE = ACTUAL_COMPLETION_DATE;
                    int reg_by = await sessionStorage.GetItemAsync<int>("session_userId");
                    string employee = await sessionStorage.GetItemAsync<string>("session_employeeName");
                    planAndOperation.REG_BY = reg_by;
                    if (planAndOperation.PLANNED_COMPLETION_DATE != null && planAndOperation.PLANNED_START_DATE != null)
                    {
                        plan_duration = (Convert.ToDateTime(planAndOperation.PLANNED_COMPLETION_DATE) - Convert.ToDateTime(planAndOperation.PLANNED_START_DATE)).Days;
                        planAndOperation.PLANNED_DURATION = Convert.ToString(plan_duration);
                    }
                    else { planAndOperation.PLANNED_DURATION = ""; }
                    if (planAndOperation.ACTUAL_COMPLETION_DATE != null && planAndOperation.ACTUAL_START_DATE != null)
                    {
                        actual_duration = (Convert.ToDateTime(planAndOperation.ACTUAL_COMPLETION_DATE) - Convert.ToDateTime(planAndOperation.ACTUAL_START_DATE)).Days;
                        planAndOperation.ACTUAL_DURATION = Convert.ToString(actual_duration);
                    }
                    else { planAndOperation.ACTUAL_DURATION = ""; }
                    planAndOperation.TASK_DESCRIPTION = await this.taskDescription.GetHTML();
                    planAndOperation.ACTIVITIES = await this.action.GetHTML();
                    planAndOperation.COMMENTS = await this.remarks.GetHTML();
                    if (planAndOperation.STATUS_ID == 0) { planAndOperation.STATUS_ID = 1; }


                    var data = await Http.PostJsonAsync<PlanAndOperationModel>(Utility.BaseUrl + "api/Setup/AddPlanAndWorkSchedule", planAndOperation);
                    toastService.ShowSuccess("Save Successfully!!");
                    //ClearData();
                    GetPlanAndWorkScheduleList(roleId);
                    planAndOperation = new PlanAndOperationModel();
                }
                catch (Exception EX)
                { }
            }
            else if (btnText == "Update")
            {
                try
                {

                    //planAndOperation.PLANNED_START_DATE = PLANNED_START_DATE;
                    //planAndOperation.ACTUAL_START_DATE = ACTUAL_START_DATE;
                    //planAndOperation.PLANNED_COMPLETION_DATE = PLANNED_COMPLETION_DATE;
                    //planAndOperation.ACTUAL_COMPLETION_DATE = ACTUAL_COMPLETION_DATE;
                    //var reg_by = await storage.GetAsync<int>("session_employeeId");
                    planAndOperation.UPD_BY = await sessionStorage.GetItemAsync<int>("session_userId");
                    //days = (ACTUAL_COMPLETION_DATE - ACTUAL_START_DATE).Days;

                    if (planAndOperation.PLANNED_COMPLETION_DATE != null && planAndOperation.PLANNED_START_DATE != null)
                    {
                        plan_duration = (Convert.ToDateTime(planAndOperation.PLANNED_COMPLETION_DATE) - Convert.ToDateTime(planAndOperation.PLANNED_START_DATE)).Days;
                        planAndOperation.PLANNED_DURATION = Convert.ToString(plan_duration);
                    }
                    else { planAndOperation.PLANNED_DURATION = ""; }
                    if (planAndOperation.ACTUAL_COMPLETION_DATE != null && planAndOperation.ACTUAL_START_DATE != null)
                    {
                        actual_duration = (Convert.ToDateTime(planAndOperation.ACTUAL_COMPLETION_DATE) - Convert.ToDateTime(planAndOperation.ACTUAL_START_DATE)).Days;
                        planAndOperation.ACTUAL_DURATION = Convert.ToString(actual_duration);
                    }
                    else { planAndOperation.ACTUAL_DURATION = ""; }
                    planAndOperation.ID = planandworkId;
                    //EditorHTMLContent = await ijsruntime.InvokeAsync<string>(
                    //        "QuillFunctions.getQuillHTML", divEditorElement);

                    //    EditorContent = await ijsruntime.InvokeAsync<string>(
                    //"QuillFunctions.getQuillContent", divEditorElement);
                    //strSavedContent = EditorHTMLContent;
                    //planAndOperation.COMMENTS = strSavedContent;
                    //planAndOperation.COMMENTS_QUILL_CONTENT = EditorContent;
                    planAndOperation.TASK_DESCRIPTION = await this.taskDescription.GetHTML();
                    planAndOperation.ACTIVITIES = await this.action.GetHTML();
                    planAndOperation.COMMENTS = await this.remarks.GetHTML();
                    if (planAndOperation.STATUS_ID == 0) { planAndOperation.STATUS_ID = 1; }
                    var data = await Http.PutJsonAsync<PlanAndOperationModel>(Utility.BaseUrl + "api/Setup/UpdatePlanAndWorkSchedule", planAndOperation);
                    toastService.ShowSuccess("Update Successfully");
                    //ClearData();
                    GetPlanAndWorkScheduleList(roleId);
                    planAndOperation = new PlanAndOperationModel();
                }
                catch (Exception EX)
                { }
            }

        }
    }
    public async Task UpdateWork()
    {
        if (IsValidation() != true)
        {
            try
            {

                //ACTUAL_COMPLETION_DATE = Convert.ToDateTime(changeEvent.Value.ToString());
                //days = (ACTUAL_COMPLETION_DATE - ACTUAL_START_DATE).Days;

                //planAndOperation.PLANNED_START_DATE = Convert.ToDateTime(date); //PLANNED_START_DATE;

                //planAndOperation.ACTUAL_START_DATE = ACTUAL_START_DATE;
                //planAndOperation.PLANNED_COMPLETION_DATE = PLANNED_COMPLETION_DATE;
                //planAndOperation.ACTUAL_COMPLETION_DATE = ACTUAL_COMPLETION_DATE;
                int reg_by = await sessionStorage.GetItemAsync<int>("session_userId");
                string employee = await sessionStorage.GetItemAsync<string>("session_employeeName");
                planAndOperation.REG_BY = reg_by;
                if (planAndOperation.PLANNED_COMPLETION_DATE != null && planAndOperation.PLANNED_START_DATE != null)
                {
                    plan_duration = (Convert.ToDateTime(planAndOperation.PLANNED_COMPLETION_DATE) - Convert.ToDateTime(planAndOperation.PLANNED_START_DATE)).Days;
                    planAndOperation.PLANNED_DURATION = Convert.ToString(plan_duration);
                }
                else { planAndOperation.PLANNED_DURATION = ""; }
                if (planAndOperation.ACTUAL_COMPLETION_DATE != null && planAndOperation.ACTUAL_START_DATE != null)
                {
                    actual_duration = (Convert.ToDateTime(planAndOperation.ACTUAL_COMPLETION_DATE) - Convert.ToDateTime(planAndOperation.ACTUAL_START_DATE)).Days;
                    planAndOperation.ACTUAL_DURATION = Convert.ToString(actual_duration);
                }
                else { planAndOperation.ACTUAL_DURATION = ""; }
                planAndOperation.TASK_DESCRIPTION = await this.taskDescription.GetHTML();
                planAndOperation.ACTIVITIES = await this.action.GetHTML();
                planAndOperation.COMMENTS = await this.remarks.GetHTML();

                var data = await Http.PostJsonAsync<PlanAndOperationModel>(Utility.BaseUrl + "api/Setup/AddPlanAndWorkSchedule", planAndOperation);
                toastService.ShowSuccess("Save Successfully!!");
                //ClearData();
                GetPlanAndWorkScheduleList(roleId);
            }
            catch (Exception EX)
            { }
        }
    }
    private bool IsValidation()
    {
        bool flag = false;
        //if (planAndOperation.TASK_DESCRIPTION == "" || planAndOperation.TASK_DESCRIPTION == string.Empty || planAndOperation.TASK_DESCRIPTION == null)
        //{
        //    toastService.ShowWarning("Task Description cannot be empty!");
        //    flag = true;
        //}
        if (planAndOperation.DEPARTMENT_ID == 0)
        {
            toastService.ShowWarning("Please Select Department");
            flag = true;
        }
        //else if (planAndOperation.TASK_ASSIGN_TO == 0)
        //{
        //    toastService.ShowWarning("Please Select Task Assign To");
        //    flag = true;
        //}
        //else if (planAndOperation.TASK_ASSIGN_BY == 0)
        //{
        //    toastService.ShowWarning("Please Select Task Assign By");
        //    flag = true;
        //}
        //else if (planAndOperation.STATUS_ID == 0)
        //{
        //    toastService.ShowWarning("Please Select Status");
        //    flag = true;
        //}
        //else if (planAndOperation.PLANNED_START_DATE == "" || planAndOperation.PLANNED_START_DATE == null)
        //{
        //    toastService.ShowWarning("Please Select Plan Start Date");
        //    flag = true;
        //}
        //else if (planAndOperation.PLANNED_COMPLETION_DATE == "" || planAndOperation.PLANNED_COMPLETION_DATE == null)
        //{
        //    toastService.ShowWarning("Please Select Plan Complete Date");
        //    flag = true;
        //}

        return flag;
    }
    //private void ClearData()
    //{
    //    planAndOperation.TASK_DESCRIPTION = string.Empty;
    //    planAndOperation.DEPARTMENT_ID = 0;
    //    planAndOperation.EMPLOYEE_ID = 0;
    //    planAndOperation.TASK_ASSIGN_TO = 0;
    //    planAndOperation.TASK_ASSIGN_BY = 0;
    //    planAndOperation.STATUS_ID = 0;
    //    planAndOperation.PLANNED_START_DATE = "";
    //    planAndOperation.ACTUAL_START_DATE = "";
    //    planAndOperation.PLANNED_COMPLETION_DATE = "";
    //    planAndOperation.ACTUAL_COMPLETION_DATE = "";
    //    planAndOperation.ACTIVITIES = "";
    //    planAndOperation.COMMENTS = "";

    //}
    private async Task GetPlanAndWorkScheduleList(int roleId)
    {
        if (roleId != 1)
        { planAndOperationList = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkSchedule/" + departId); }
        else { planAndOperationList = await Http.GetJsonAsync<List<PlanandOperationViewModel>>(Utility.BaseUrl + "api/Setup/GetWorkScheduleBySuperAdmin"); }
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JsRuntime.InvokeVoidAsync("JsInteropDatepicker");
    }
    private void SaveMode()
    {
        planAndOperation = new PlanAndOperationModel();

        btnText = "Save";
    }
    private void Pagination()
    {
        pageSize = 20;
        if (listPlanOperation.Count > 0)
        {
            planAndOperationList = listPlanOperation.Take(pageSize).ToList();
            TotalPage = (int)Math.Ceiling(listPlanOperation.Count() / (decimal)pageSize);
            StartNumber = planAndOperationList.FirstOrDefault().SL;
            EndNumber = planAndOperationList[planAndOperationList.Count - 1].SL;
        }

    }
    private void UpdateList(int pageNumber)
    {
        planAndOperationList = listPlanOperation.Skip(pageNumber * pageSize).Take(pageSize).ToList();
        Currentpage = pageNumber;
        if (planAndOperationList.Count > 0)
        {
            StartNumber = planAndOperationList.FirstOrDefault().SL;
            EndNumber = planAndOperationList[planAndOperationList.Count - 1].SL;
        }

    }
    //private List<ProductViewModel> GetItem(string parameter)
    //{
    //    List<ProductViewModel> productList = new List<ProductViewModel>();
    //    if (planAndOperationList.Any(er => er.ProductCode.Contains(parameter)))
    //    { productList = planAndOperationList.FindAll(er => er.ProductCode.Contains(parameter)); }

    //    else if (planAndOperationList.Any(er => er.ProductName.Contains(parameter)))
    //    { productList = planAndOperationList.FindAll(er => er.ProductName.Contains(parameter)); }

    //    else if (planAndOperationList.Any(er => er.ProductCategoryName.Contains(parameter)))
    //    { productList = planAndOperationList.FindAll(er => er.ProductCategoryName.Contains(parameter)); }
    //    if (parameter != null && parameter != "")
    //    {
    //        pageSize = 5;
    //        productList = productList.Take(pageSize).ToList();
    //        TotalPage = (int)Math.Ceiling(productList.Count() / (decimal)pageSize);
    //    }
    //    else
    //    {

    //    }
    //    return productList;
    //}
    private void NavigatTo(string direction)
    {
        if (direction == "prev" && Currentpage != 0)
            Currentpage -= 1;
        if (direction == "next" && Currentpage != TotalPage - 1)
            Currentpage += 1;

        UpdateList(Currentpage);
    }
    public async void PlanAndWork()
    {
        await Http.PostJsonAsync<List<PlanandOperationViewModel>>("http://localhost:32330/api/Abc1/GetPlan", listPlanOperation);
    }

    public async Task GetPlanAndOpp()
    {
        listPlanOperation = await planAndWorkService.GetPlanAndWork();
    }

    public async Task PlanAndWorkScheduleReport()
    {
        await JsRuntime.InvokeAsync<object>("open", Utility.ReportUrl+ "api/Abc1/GetPlan", "_blank");

    }






#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private PlanAndWorkScheduleService planAndWorkService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SessionData sessionData { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ProtectedLocalStorage ProtectedLocalStore { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IWebHostEnvironment webhost { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime JsRuntime { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IToastService toastService { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private SessionState state { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Blazored.SessionStorage.ISessionStorageService sessionStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager UriHelper { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
