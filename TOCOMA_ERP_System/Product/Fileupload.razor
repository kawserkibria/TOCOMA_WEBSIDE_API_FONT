@page "/Fileupload"
@layout CustomLayout
@using System.IO

<h3>fileupload</h3>
@*<InputFile OnChange="@OnChange" multiple />
    @if(imageSources!=null)
    {
        foreach (var imageSource in imageSources)
    {
    <img src="@imageSource" />
    }
    }*@
<InputFile OnChange="OnChange" multiple></InputFile>
@if (fileList != null)
{
    foreach (var imageSource in fileList)
    {
        <img src="@imageSource" /><br />
    }
}

    @code {
        string? status;
private List<string> imageSources;
    private const int maxAllowedFiles = 2;
    private string ErrorMessage;
    List<string> fileList = new List<string>();
    IReadOnlyList<IBrowserFile> selectedFiles;
    List<string> imageUrls = new List<string>();
    async Task OnFileChanged(InputFileChangeEventArgs e)
    {
        status += "\nChanged";
        try
        {
            var buffer = new byte[4096];
            foreach (var file in e.GetMultipleFiles(e.FileCount))
            {
                status += "\nReading file: " + file.Name;
                _ = InvokeAsync(StateHasChanged);

                using var stream = file.OpenReadStream(maxAllowedSize: long.MaxValue);
                while (true)
                {
                    var read = await stream.ReadAsync(buffer);
                    if (read == 0)
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            status += "\nError: " + ex.Message;
            _ = InvokeAsync(StateHasChanged);
        }
    }
    async Task OnChange(InputFileChangeEventArgs e)
    {
        //imageSources.Clear();
        ErrorMessage = string.Empty;
        if (e.FileCount > maxAllowedFiles)
        {
            ErrorMessage = $"Only {maxAllowedFiles} files can be uploaded";
            return;
        }

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            using var stream = file.OpenReadStream();
            using var ms = new MemoryStream();
            await stream.CopyToAsync(ms);
            imageSources.Add($"data:{file.ContentType};base64,{Convert.ToBase64String(ms.ToArray())}");
            fileList = imageSources;
        }

    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();

        foreach (var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("pdf", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:*;base64,{Convert.ToBase64String(buffer)}";
            imageUrls.Add(imgData);

        }
        this.StateHasChanged();
    }
    }
