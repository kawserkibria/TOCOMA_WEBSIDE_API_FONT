@page "/EditItem/{itemCode}"
@layout CustomLayout
@inject HttpClient Http
@inject IToastService toastService
@inject IWebHostEnvironment env
@using Blazored.Typeahead
@using System.IO

<div class="container">
    <div class="card">
        <div class="card-header">
            Edit Item
            <button class="btn btn-success" style="float:right;width:100px" @onclick="SaveProduct">Update</button>

        </div>

        <br />
        <EditForm Model="@item" style="margin-left:10px;margin-right:10px">
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Name</label>
                <div class="col-sm-10">
                    <InputText @bind-Value="@item.ITEM_NAME" type="text" class="form-control" placeholder="Enter according to the TDS" />
                </div>
            </div>

            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Category</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.CATEGORY_ID" class="form-control">
                        <option>--Select Item Category--</option>
                        @foreach (var item in categoryList)
                        {
                            <option value="@item.CATEGORY_ID">@item.CATEGORY_NAME</option>
                        }

                    </InputSelect>
                </div>
            </div>
            <!---------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Short Description</label>
                <div class="col-sm-10">
                    <BlazoredTextEditor @ref="@shortDescription">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
            </div>
            <br />
            <br />

            <!-------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Long Description</label>
                <div class="col-sm-10">
                    <BlazoredTextEditor @ref="@longDescription">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                                <option value="4"></option>
                                <option value="5"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <select class="ql-color"></select>
                                <select class="ql-background"></select>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>


                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
            </div>
            <br />
            <br />
            <!------------->
            @*<div class="form-group row">
                    <label for="colFormLabel" class="col-sm-2 col-form-label">Features & Benefits</label>
                    <div class="col-sm-10">
                        <InputSelect @bind-Value="@item.FEATURES_AND_BENEFITS" class="form-control">
                            <option>--Select Features & Benefit</option>
                            <option value="Option1">Option1</option>
                            <option value="Option2">Option2</option>
                            <option value="Option3">Option3</option>
                            <option value="Option4">Option4</option>
                        </InputSelect>
                    </div>
                </div>*@
            <!--------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Area Of Application</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.APPLICATION_AREA" class="form-control">
                        <option>--Select Application Area--</option>
                        @foreach (var item in itemApplicationList)
                        {
                            <option value="@item.APPLICATION_AREA">@item.APPLICATION_AREA</option>
                        }

                    </InputSelect>
                </div>
            </div>
            <!------------>
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Unit Of Mesurment</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.UNIT_ID" class="form-control">
                        <option>--Select Unit--</option>
                        @foreach (var item in unitList)
                        {
                            <option value="@item.UNIT_ID">@item.UNIT_NAME</option>
                        }

                    </InputSelect>
                </div>
            </div>
            <!------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Pack Size</label>
                <div class="col-sm-10">
                    <InputText @bind-Value="@item.PACK_SIZE" type="text" class="form-control" placeholder="pack size" />
                </div>
            </div>

            <!------------>
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Item Image</label>
                <div class="col-sm-10">
                    <InputFile OnChange="@SelectItemImage" multiple />
                    @foreach (var itmImage in itemimageUrls)
                    {
                        <img src="@itmImage" />
                    }
                    @if(display_image==1)
                    {<img src="@itemView.ITEM_IMAGE" style="width:130px;height:130px" /> }
                    
                </div>
            </div>
            <!------------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Item TDS</label>
                <div class="col-sm-10">
                    <InputFile OnChange="@SelectItemTDS" multiple />
                    <table class="table" style="width:100%">
                        <tbody>

                            @foreach (var item in itemTDS)
                            {

                                <tr style="width:30px">
                                    <td style="width: 90%"><p>@item</p></td>
                                    <td style="width: 10%"><i class="fa fa-trash" aria-hidden="true" @onclick=@(() => CancelTds(item))></i></td>
                                </tr>

                            }
                        </tbody>
                    </table>

                </div>
            </div>
            <!---------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Item SDS</label>
                <div class="col-sm-10">
                    <InputFile OnChange="@SelectItemSDS" multiple />
                    <table class="table" style="width:100%">
                        <tbody>

                            @foreach (var item in itemSDS)
                            {

                                <tr style="width:30px">
                                    <td style="width: 90%"><p>@item</p></td>
                                    <td style="width: 10%"><i class="fa fa-trash" aria-hidden="true" @onclick=@(() => CancelSds(item))></i></td>
                                </tr>

                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <!------------------>
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Item Flyer/Brochure</label>
                <div class="col-sm-10">
                    <InputFile OnChange="@SelectItemFlyer" multiple />
                    <table class="table" style="width:100%">
                        <tbody>

                            @foreach (var item in itemFlyer)
                            {

                                <tr style="width:30px">
                                    <td style="width: 90%"><p>@item</p></td>
                                    <td style="width: 10%"><i class="fa fa-trash" aria-hidden="true" @onclick=@(() => CancelFlayer(item))></i></td>
                                </tr>

                            }
                        </tbody>
                    </table>
                </div>
            </div>

            <!----------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Dosage</label>
                <div class="col-sm-10">
                    <InputText @bind-Value="@item.DOSAGE" type="text" class="form-control" />
                </div>
            </div>

            <!---------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Coverage/<br />Consumption</label>
                <div class="col-sm-10">
                    <InputText @bind-Value="@item.COVERAGE_CONSUMPTION" type="text" class="form-control" />
                </div>
            </div>
            <!--------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Made In</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.MAID_IN_COUNTRY" class="form-control">
                        <option>--Select Made In</option>
                        @foreach (var item in CountryList)
                        {
                            <option value="@item.COUNTRY_NAME">@item.COUNTRY_NAME</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <!------------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Import From</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.IMPORT_FROM" class="form-control">
                        <option>--Select Import From--</option>
                        @foreach (var item in CountryList)
                        {
                            <option value="@item.COUNTRY_NAME">@item.COUNTRY_NAME</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <!----------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Brand</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.BRAND_NAME" class="form-control">
                        <option>--Select Brand--</option>
                        @foreach (var item in brandList)
                        {
                            <option value="@item.BRAND_NAME">@item.BRAND_NAME</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <!--------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Brand Origin Country</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.BRAND_ORIGIN_COUNTRY" class="form-control">
                        <option>--Select Brand Origin Country--</option>
                        @foreach (var item in CountryList)
                        {
                            <option value="@item.COUNTRY_NAME">@item.COUNTRY_NAME</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <!-------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Item Keyward</label>
                <div class="col-sm-10">
                    <InputText type="text" @bind-Value="@item.ITEM_KEYWORD" class="form-control" />
                </div>
            </div>
            <!-------------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Application Image</label>
                <div class="col-sm-10">
                    <InputFile OnChange="@SelectApplicationImage" multiple />
                    @foreach (var itmImage in ApplicationimageUrls)
                    {
                        <img src="@itmImage" />
                    }
                </div>
            </div>
            <!------------>
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Application Video</label>
                <div class="col-sm-10">
                    <InputFile multiple />
                    @*@foreach (var appVideo in imageUrls)
                        {
                            <img src="@appVideo" />
                        }*@
                </div>
            </div>
            <!-------------------------->

            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Shelf Life</label>
                <div class="col-sm-10">
                    <InputText @bind-Value="@item.SHELF_LIFE" type="text" class="form-control" />
                </div>
            </div>
            <!------------->
            <!--------Related Item--------->

            <div class="form-group row">
                <label for="colFormLabelSm" class="col-sm-2 col-form-label col-form-label-sm">Related Items</label>
                <div class="col-sm-10">
                    <select @onchange="Related_Item_Clicked" class="form-control">
                        <option>--Select Related Item--</option>
                        @foreach (var item in productList)
                        {
                            <option value="@item.ITEM_NAME">@item.ITEM_NAME</option>
                        }
                    </select>

                    <table class="table" style="width:100%">
                        <tbody>

                            @foreach (var item in relatedItemList)
                            {

                                <tr style="width:30px">
                                    <td style="width: 90%"><p>@item.ITEM_NAME</p></td>
                                    <td style="width: 10%"><i class="fa fa-trash" aria-hidden="true" @onclick=@(() => DeleteRelatedItem(item.ITEM_NAME))></i></td>
                                </tr>

                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <!----------------->

            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Item Price</label>
                <div class="col-sm-10">
                    <InputNumber @bind-Value="@item.ITEM_PRICE" type="text" class="form-control" />
                </div>
            </div>
            <!------------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Item Color</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.COLOR_ID" class="form-control">
                        <option>--Select Item Color--</option>
                        @foreach (var item in colorList)
                        {
                            <option value="@item.COLOR_ID">@item.COLOR_NAME</option>
                        }
                    </InputSelect>
                </div>
            </div>
            <!------------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Pack Type</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.PACK_TYPE" class="form-control">
                        <option>--Select Pack Type--</option>
                        <option value="Option1">Option1</option>
                        <option value="Option2">Option2</option>
                        <option value="Option3">Option3</option>
                        <option value="Option4">Option4</option>
                    </InputSelect>
                </div>
            </div>
            <!------>
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Speciality</label>
                <div class="col-sm-10">
                    <InputText @bind-Value="@item.ITEM_SPECIALTY" type="text" class="form-control" />
                </div>
            </div>
            <!------------>
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Certification</label>
                <div class="col-sm-10">
                    <InputFile OnChange="@SelectItemCertification" multiple />
                    <table class="table" style="width:100%">
                        <tbody>

                            @foreach (var item in itemCertificate)
                            {

                                <tr style="width:30px">
                                    <td style="width: 90%"><p>@item</p></td>
                                    <td style="width: 10%"><i class="fa fa-trash" aria-hidden="true"></i></td>
                                </tr>

                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <!-------------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Related Application</label>
                <div class="col-sm-10">
                    <select class="form-control" @onchange="RelatedApplicationClicked">
                        <option>--Select Related Application--</option>
                        @foreach (var item in itemApplicationList)
                        {
                            <option value="@item.APPLICATION_AREA">@item.APPLICATION_AREA</option>
                        }
                    </select>
                    @foreach (var item in SelectedRelatedApplicationList)
                    {
                        <p>@item.APPLICATION_AREA</p>
                    }
                </div>
            </div>


            <!-------------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Type Of Inventory</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.TYPE_OF_INVENTORY" class="form-control">
                        <option>--Select Inventory Type--</option>
                        <option value="Regular">Regular</option>
                        <option value="Based on Order">Based on Order</option>
                        <option value="Special Request">Special Request</option>
                        <option value="OEM">OEM</option>
                    </InputSelect>

                </div>
            </div>


            <!-------------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Sewistiveness/<br />Precaution</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.SEWSTIVENESS" class="form-control">
                        <option>--Select Inventory Type--</option>
                        @foreach (var item in itemSewstiveness)
                        {
                            <option value="@item.SEWISTIVENESS">@item.SEWISTIVENESS</option>
                        }
                    </InputSelect>

                </div>
            </div>

            <!--------------->
            <div class="form-group row">
                <label for="colFormLabel" class="col-sm-2 col-form-label">Product Form/<br />Appearance</label>
                <div class="col-sm-10">
                    <InputSelect @bind-Value="@item.ITEM_FORM_APPEARANCE" class="form-control">
                        <option>--Select Item Form/Appearance--</option>
                        @foreach (var item in itemForm_Appearances)
                        {
                            <option value="@item.ITEM_FORM_APPEARANCE">@item.ITEM_FORM_APPEARANCE</option>
                        }
                    </InputSelect>

                </div>
            </div>

        </EditForm>
    </div>
</div>

@code {
    BlazoredTextEditor shortDescription;
    BlazoredTextEditor longDescription;
    string itemname = "";
    List<string> itemimageUrls = new List<string>();
    List<string> itemtdsUrls = new List<string>();
    List<string> itemimage = new List<string>();
    List<string> itemTDS = new List<string>();
    List<string> allitemTDS = new List<string>();
    List<string> itemSDS = new List<string>();
    List<string> allitemSDS = new List<string>();
    List<string> itemFlyer = new List<string>();
    List<string> allitemFlyer = new List<string>();
    List<string> itemCertificate = new List<string>();
    List<string> ApplicationimageUrls = new List<string>();
    List<ItemEntity> productList = new List<ItemEntity>();
    List<ItemCategory> categoryList = new List<ItemCategory>();
    IReadOnlyList<IBrowserFile> selectedFiles;
    IReadOnlyList<IBrowserFile> selectedItemImage;
    IReadOnlyList<IBrowserFile> selectedTDS;
    IReadOnlyList<IBrowserFile> selectedSDS;
    IReadOnlyList<IBrowserFile> selectedFlayer;
    IReadOnlyList<IBrowserFile> selectedCertificate;
    ItemEntity item = new ItemEntity();
    ItemEntity relatedItem = new ItemEntity();

    List<ItemEntity> itemList = new List<ItemEntity>();
    List<CountryModel> CountryList = new List<CountryModel>();
    List<UnitModel> unitList = new List<UnitModel>();
    List<BrandModel> brandList = new List<BrandModel>();
    List<ColorModel> colorList = new List<ColorModel>();
    List<ItemApplicationAreaModel> itemApplicationList = new List<ItemApplicationAreaModel>();
    ItemApplicationAreaModel relatedApp = new ItemApplicationAreaModel();
    List<ItemApplicationAreaModel> SelectedRelatedApplicationList = new List<ItemApplicationAreaModel>();
    List<ItemEntity> relatedItemList = new List<ItemEntity>();
    List<ItemSewstivenessModel> itemSewstiveness = new List<ItemSewstivenessModel>();
    List<ItemForm_Appearance> itemForm_Appearances = new List<ItemForm_Appearance>();
    List<ImageFile> filesBase64 = new List<ImageFile>();
    ItemViewModel itemView = new ItemViewModel();

    string categoryName;
    string code;
    string path_withfile = "";
    string saveimageurl = "";
    public int display_image = 1;

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 5000;
    private int maxAllowedFiles = 3;
    private bool isLoading;
    List<string> tdslist = new List<string>();
    List<string> sdslist = new List<string>();
    List<string> videolist = new List<string>();
    // ImageFile.cs
    public class ImageFile
    {
        public string base64data { get; set; }
        public string contentType { get; set; }
        public string fileName { get; set; }
    }
    [Parameter]
    public string itemCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetItemCategory();
        await GetItemList();
        await GetUnit();
        await GetCountry();
        await GetBrand();
        await GetAreaOfApplication();
        await GetItemSewstiveness();
        await GetItemForm_Appearance();
        await GetColor();


        itemView = await Http.GetJsonAsync<ItemViewModel>(Utility.BaseUrl + "api/Product/GetItemByCode/" + itemCode);

        item.ITEM_NAME = itemView.ITEM_NAME;
        saveimageurl = itemView.ITEM_IMAGE;
        item.ITEM_CODE = itemView.ITEM_CODE;
        item.CATEGORY_ID = itemView.CATEGORY_ID;
        item.BRAND_NAME = itemView.BRAND_NAME;
        item.APPLICATION_AREA = itemView.APPLICATION_AREA;
        item.SHORT_DESCRIPTION= itemView.SHORT_DESCRIPTION;

        await this.shortDescription.LoadHTMLContent(itemView.SHORT_DESCRIPTION);
        await this.longDescription.LoadHTMLContent(itemView.LONG_DESCRIPTION);
        item.UNIT_ID = itemView.UNIT_ID;
        item.PACK_SIZE = itemView.PACK_SIZE;
        item.DOSAGE = itemView.DOSAGE;
        item.COVERAGE_CONSUMPTION = itemView.COVERAGE_CONSUMPTION;
        item.MAID_IN_COUNTRY = itemView.MAID_IN_COUNTRY;
        item.IMPORT_FROM = itemView.IMPORT_FROM;
        item.BRAND_ORIGIN_COUNTRY = itemView.BRAND_ORIGIN_COUNTRY;
        item.ITEM_KEYWORD = itemView.ITEM_KEYWORD;
        item.SHELF_LIFE = itemView.SHELF_LIFE;
        item.ITEM_PRICE = itemView.ITEM_PRICE;
        item.PACK_TYPE = itemView.PACK_TYPE;
        item.ITEM_SPECIALTY = itemView.ITEM_SPECIALTY;
        item.TYPE_OF_INVENTORY = itemView.TYPE_OF_INVENTORY;
        item.SEWSTIVENESS = itemView.SEWSTIVENESS;
        item.ITEM_FORM_APPEARANCE = itemView.ITEM_FORM_APPEARANCE;
        item.COLOR_ID = itemView.COLOR_ID;

        item.ITEM_IMAGE = itemView.ITEM_IMAGE;

        var path = $"{env.WebRootPath}\\images\\File\\TDS";
        string[] tdsfilelist = Directory.GetFiles(path);

        var sdspath = $"{env.WebRootPath}\\images\\File\\SDS";
        string[] sdsfilelist = Directory.GetFiles(sdspath);

        var flayerPath = $"{env.WebRootPath}\\images\\File\\FLAYER";
        string[] flayerList = Directory.GetFiles(flayerPath);

        var videoPath = $"{env.WebRootPath}\\Video";
        string[] allvideolist = Directory.GetFiles(videoPath);

        List<string> file = new List<string>();
        //itemDetails.ITEM_CODE = "100";
        foreach (var item in tdsfilelist)
        {
            if (item.Contains(itemView.ITEM_CODE))
            {
                itemTDS.Add(Path.GetFileName(item));
                allitemTDS.Add(Path.GetFileName(item));
            }

        }
        //----------------
        foreach (var item in sdsfilelist)
        {
            if (item.Contains(itemView.ITEM_CODE))
            {
                itemSDS.Add(Path.GetFileName(item));
                allitemSDS.Add(Path.GetFileName(item));
            }

        }
        //--------------
        //----------------
        foreach (var item in flayerList)
        {
            if (item.Contains(itemView.ITEM_CODE))
            {
                itemFlyer.Add(Path.GetFileName(item));
                allitemFlyer.Add(Path.GetFileName(item));
            }

        }

        foreach (var item in allvideolist)
        {
            if (item.Contains(itemView.ITEM_CODE))
            {
                videolist.Add(Path.GetFileName(item));
            }

        }
    }
    private void CancelTds(string file)
    {
        int index = itemTDS.IndexOf(file);
        itemTDS.RemoveAt(index);
    }
    private void CancelSds(string file)
    {
        int index = itemSDS.IndexOf(file);
        itemSDS.RemoveAt(index);
    }
    private void CancelFlayer(string file)
    {
        int index = itemFlyer.IndexOf(file);
        itemFlyer.RemoveAt(index);
    }

    private async Task GetItemForm_Appearance()
    {
        itemForm_Appearances = await Http.GetJsonAsync<List<ItemForm_Appearance>>(Utility.BaseUrl + "api/Setup/GetItemForm_Appearance");
    }
    private async Task GetItemSewstiveness()
    {
        itemSewstiveness = await Http.GetJsonAsync<List<ItemSewstivenessModel>>(Utility.BaseUrl + "api/Setup/GetItemSewstiveness");
    }
    private async Task GetItemCategory()
    {
        categoryList = await Http.GetJsonAsync<List<ItemCategory>>(Utility.BaseUrl + "api/Setup/GetItemCategory");
    }
    private async Task GetUnit()
    {
        unitList = await Http.GetJsonAsync<List<UnitModel>>(Utility.BaseUrl + "api/Setup/GetUnit");
    }
    private async Task GetColor()
    {
        colorList = await Http.GetJsonAsync<List<ColorModel>>(Utility.BaseUrl + "api/Setup/GetColorList");
    }
    private async Task GetCountry()
    {
        CountryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
    }
    private async Task GetBrand()
    {
        brandList = await Http.GetJsonAsync<List<BrandModel>>(Utility.BaseUrl + "api/Setup/GetBrandList");
    }
    private async Task GetItemList()
    {
        productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product");
    }
    private async Task GetAreaOfApplication()
    {
        itemApplicationList = await Http.GetJsonAsync<List<ItemApplicationAreaModel>>(Utility.BaseUrl + "api/Setup/GetItemApplicationArea");
    }
    private async Task SelectItemImage1111(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            //var path = $"{env.WebRootPath}\\images\\File\\TDS\\{file.Name}";
            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();
            itemimage.Add(file.Name);
            //itemTDS.Add(path);
            selectedItemImage = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();


    }
    private async Task SelectItemImage11(InputFileChangeEventArgs e)
    {
        selectedItemImage = e.GetMultipleFiles();

        foreach (var imageFile in selectedItemImage)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            //var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            itemimageUrls.Add(imgData);

        }

        this.StateHasChanged();
    }
    private async Task SelectItemImage(InputFileChangeEventArgs e)
    {
        //itemView.ITEM_IMAGE = null;
        display_image = 0;
        selectedItemImage = e.GetMultipleFiles();

        foreach (var imageFile in selectedItemImage)
        {
            //var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var resizedImage = await imageFile.RequestImageFileAsync(imageFile.ContentType, 150, 150);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            //var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            itemimageUrls.Add(imgData);

        }

        this.StateHasChanged();
    }
    async Task SelectItemImage333(InputFileChangeEventArgs e)
    {
        itemView.ITEM_IMAGE = null;
        var files = e.GetMultipleFiles(); // get the files selected by the users
        foreach (var file in files)
        {
            var resizedFile = await file.RequestImageFileAsync(file.ContentType, 640, 480); // resize the image file
            var buf = new byte[resizedFile.Size]; // allocate a buffer to fill with the file's data
            using (var stream = resizedFile.OpenReadStream())
            {
                await stream.ReadAsync(buf); // copy the stream to the buffer
            }
            //itemimageUrls.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name });
            filesBase64.Add(new ImageFile { base64data = Convert.ToBase64String(buf), contentType = file.ContentType, fileName = file.Name }); // convert to a base64 string!!
                                                                                                                                               //itemimageUrls.Add(filesBase64);
            itemimageUrls.Add(Convert.ToBase64String(buf));
            selectedItemImage = files;
        }
        //message = "Click UPLOAD to continue";
    }



    private async Task SelectApplicationImage(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();

        foreach (var imageFile in selectedFiles)
        {
            var resizedImage = await imageFile.RequestImageFileAsync("image/jpg", 100, 100);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imgData = $"data:image/jpg;base64,{Convert.ToBase64String(buffer)}";
            ApplicationimageUrls.Add(imgData);

        }
        this.StateHasChanged();
    }
    public async Task SaveProduct()
    {
        if (IsValidation() != true)
        {

            bool IsExistProduct = await Http.GetJsonAsync<bool>(Utility.BaseUrl + "api/Product/GetIsItemExist/" + itemView.ITEM_CODE);
            if (IsExistProduct == true)
            {
                try
                {
                    code = item.ITEM_CODE;
                    if (itemTDS != null)
                    {
                        foreach(var alltds in allitemTDS)
                        {
                            foreach(var tds in itemTDS)
                            {
                                if(alltds!=tds)
                                {
                                    if (itemTDS.Contains(alltds))
                                    { }
                                    else
                                    {
                                        var path = $"{env.WebRootPath}\\images\\File\\TDS\\{alltds}";
                                        if (File.Exists(path))
                                        {
                                            File.Delete(path);
                                        }
                                    }


                                }
                            }
                        }


                    }
                    if (selectedTDS != null)
                    {
                        foreach (var tds in selectedTDS)
                        {
                            var path = $"{env.WebRootPath}\\images\\File\\TDS\\{code + "_" + tds.Name}";
                            await using FileStream fs = new(path, FileMode.Create);
                            await tds.OpenReadStream(maxFileSize).CopyToAsync(fs);

                            //Stream stream = tds.OpenReadStream();
                            //var path = $"{env.WebRootPath}\\images\\File\\TDS\\{tds.Name}";
                            //FileStream fs = File.Create(path);
                            //await stream.CopyToAsync(fs);
                            //stream.Close();
                            fs.Close();
                        }
                    }
                    if (itemSDS != null)
                    {
                        foreach (var allsds in allitemSDS)
                        {
                            foreach (var sds in itemSDS)
                            {
                                if (allsds != sds)
                                {
                                    if (itemSDS.Contains(allsds))
                                    { }
                                    else
                                    {
                                        var path = $"{env.WebRootPath}\\images\\File\\SDS\\{allsds}";
                                        if (File.Exists(path))
                                        {
                                            File.Delete(path);
                                        }
                                    }


                                }
                            }
                        }


                    }
                    if (selectedSDS != null)
                    {
                        foreach (var sds in selectedSDS)
                        {
                            //Stream stream = sds.OpenReadStream();
                            //var path = $"{env.WebRootPath}\\images\\File\\SDS\\{sds.Name}";
                            //FileStream fs = File.Create(path);
                            //await stream.CopyToAsync(fs);
                            //stream.Close();

                            var path = $"{env.WebRootPath}\\images\\File\\SDS\\{code + "_" + sds.Name}";
                            await using FileStream fs = new(path, FileMode.Create);
                            await sds.OpenReadStream(maxFileSize).CopyToAsync(fs);
                            fs.Close();
                        }
                    }

                    if (itemFlyer != null)
                    {
                        foreach (var allflayer in allitemFlyer)
                        {
                            foreach (var flayer in itemFlyer)
                            {
                                if (allflayer != flayer)
                                {
                                    if (itemFlyer.Contains(allflayer))
                                    { }
                                    else
                                    {
                                        var path = $"{env.WebRootPath}\\images\\File\\FLAYER\\{allflayer}";
                                        if (File.Exists(path))
                                        {
                                            File.Delete(path);
                                        }
                                    }
                                }
                            }
                        }


                    }
                    if (selectedFlayer != null)
                    {
                        foreach (var flayer in selectedFlayer)
                        {
                            //Stream stream = flayer.OpenReadStream();
                            //var path = $"{env.WebRootPath}\\images\\File\\FLAYER\\{flayer.Name}";
                            //FileStream fs = File.Create(path);
                            //await stream.CopyToAsync(fs);
                            //stream.Close();

                            var path = $"{env.WebRootPath}\\images\\File\\FLAYER\\{code + "_" + flayer.Name}";
                            await using FileStream fs = new(path, FileMode.Create);
                            await flayer.OpenReadStream(maxFileSize).CopyToAsync(fs);
                            fs.Close();
                        }
                    }

                    if (selectedItemImage != null)
                    {
                        foreach (var file in selectedItemImage)
                        {
                            var existImagepath = $"{env.WebRootPath}{itemView.ITEM_IMAGE}";
                            bool exists = System.IO.Directory.Exists(existImagepath);
                            if (File.Exists(existImagepath))
                            {
                                File.Delete(existImagepath);
                            }

                            //string subCategory_Unic_imageid = "";
                            //subCategory_Unic_imageid = GetSubCategoryUnicImageId();
                            //await GetProductUnicImageId();
                            //productModel.ProductCategoryId = Convert.ToInt32(productcategoryid); //Convert.ToInt32(productModel.ProductCategoryid);
                            //productModel.SubCategoryId = Convert.ToInt32(subcategoryId);
                            //string DATE = dateTimeFormatModel.GetDateString();

                            ////PRODUCTINFO_IMAGE_UNIC_ID = DATE + "_" + Convert.ToInt32(productModel.ProductCategoryId) + "_" + ProductInfo_Image_Code;
                            //code = await Http.GetStringAsync(Utility.BaseUrl + "api/Product/GetProductCode");
                            ////Stream stream = file.OpenReadStream();
                            categoryName = categoryList.Find(x => x.CATEGORY_ID == item.CATEGORY_ID).CATEGORY_NAME;
                            // var path = $"{env.WebRootPath}\\images\\Products\\{categoryName}";
                            //var path = $"{env.WebRootPath}\\Images\\Products\\{categoryName}\\{code + "_" + file.Name}";
                            //bool exists = System.IO.Directory.Exists(path);
                            //if (!exists)
                            //    System.IO.Directory.CreateDirectory(path);
                            string p = "";
                            //path_withfile = $"{env.WebRootPath}\\Images\\Products\\{categoryName}\\{code +"_"+ file.Name}";
                            path_withfile = $"{env.WebRootPath}\\images\\Products\\{code + "_" + file.Name}";
                            p = env.WebRootPath;
                            saveimageurl = path_withfile.Replace(p, "");
                            ////await using FileStream fs = new(path_withfile, FileMode.Create);
                            ////await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                            //FileStream fs = File.Create(path_withfile);
                            //await stream.CopyToAsync(fs);
                            //stream.Close();
                            //fs.Close();



                            //var path1 = $"{env.WebRootPath}\\images\\Products\\{categoryName}";

                            //bool exists = System.IO.Directory.Exists(path1);
                            //if (!exists)
                            //    System.IO.Directory.CreateDirectory(path1);
                            //var path2 = $"{env.WebRootPath}\\Images\\Products\\{categoryName}\\{code + "_" + file.Name}";
                            var path2 = $"{env.WebRootPath}\\images\\Products\\{code + "_" + file.Name}";
                            await using FileStream fs = new(path2, FileMode.Create);
                            await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                            // await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
                            fs.Close();
                        }
                    }
                    item.ITEM_IMAGE = saveimageurl;
                    if (shortDescription != null)
                    {
                        item.SHORT_DESCRIPTION = await this.shortDescription.GetHTML();
                    }
                    if (longDescription != null)
                    { item.LONG_DESCRIPTION = await this.longDescription.GetHTML(); }
                    item.ITEM_CODE = itemCode;

                    var data = await Http.PutJsonAsync<ItemEntity>(Utility.BaseUrl + "api/Product", item);


                    toastService.ShowSuccess("Item Updated Successfully!!!");
                }
                catch (Exception ex)
                {
                    toastService.ShowError(ex.Message);
                }
            }

            await GetItemList();


        }
    }
    //private async Task GetProductUnicImageId()
    //{
    //    var code = await Http.GetJsonAsync<UnicCodeModel>(Utility.BaseUrl + "api/ProductInfo/GetProductInfoImageUnicId");
    //    ProductInfo_Image_Code = Convert.ToInt64(code.Product_ImageUnicCode);
    //}
    private bool IsValidation()
    {
        bool flag = false;
        if (item.ITEM_NAME == "" || item.ITEM_NAME == string.Empty || item.ITEM_NAME == null)
        {
            toastService.ShowWarning("Item Name cannot be empty!");
            flag = true;
        }
        else if (item.CATEGORY_ID == 0)
        {
            toastService.ShowError("Please Select Category!");
            flag = true;
        }

        return flag;
    }
    private void ClearData()
    {


        item.ITEM_CODE = "";
        item.ITEM_NAME = "";
        //item.DESCRIPTION = "";
        item.PACK_SIZE = "";
        item.ITEM_PURCHASE_PRICE = 0;
        item.ITEM_SALE_PRICE = 0;
        item.VENDOR_ID = 0;
        item.UNIT_ID = 0;
        item.COLOR_ID = 0;
        item.BRAND_ID = 0;


    }
    private async Task RelatedApplicationClicked(ChangeEventArgs change)
    {
        relatedApp = new ItemApplicationAreaModel();
        relatedApp.APPLICATION_AREA = change.Value.ToString().Trim();
        relatedApp.APPLICATION_AREA_ID = itemApplicationList.Find(x => x.APPLICATION_AREA == change.Value.ToString().Trim()).APPLICATION_AREA_ID;

        SelectedRelatedApplicationList.Add(relatedApp);

    }
    private async Task Related_Item_Clicked(ChangeEventArgs change)
    {
        relatedItem = new ItemEntity();
        relatedItem.ITEM_NAME = change.Value.ToString();
        relatedItem.ITEM_ID = productList.Find(x => x.ITEM_NAME.ToString().Trim() == change.Value.ToString().Trim()).ITEM_ID;


        relatedItemList.Add(relatedItem);

    }
    public async void DeleteRelatedItem(string item)
    {
        var itemToRemove = relatedItemList.Single(r => r.ITEM_NAME == item);
        relatedItemList.Remove(itemToRemove);

        StateHasChanged();
    }

    private async void SelectItemTDS(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            var path = $"{env.WebRootPath}\\images\\File\\TDS\\{file.Name}";
            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();
            itemTDS.Add(file.Name);
            //itemTDS.Add(path);
            selectedTDS = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }
    private async void SelectItemSDS(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            //var path = $"{env.WebRootPath}\\images\\File\\SDS\\{file.Name}";
            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();
            itemSDS.Add(file.Name);
            selectedSDS = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }
    private async void SelectItemFlyer(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            //Stream stream = file.OpenReadStream();
            //var path = $"{env.WebRootPath}\\images\\File\\FLAYER\\{file.Name}";

            //FileStream fs = File.Create(path);
            //await stream.CopyToAsync(fs);
            //stream.Close();
            //fs.Close();
            itemFlyer.Add(file.Name);
            selectedFlayer = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }

    private async void SelectItemCertification(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        foreach (var file in selectedFiles)
        {
            itemCertificate.Add(file.Name);
            selectedCertificate = selectedFiles;
            selectedFiles = null;
        }
        this.StateHasChanged();
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        //selectedFiles = e.GetMultipleFiles();
        isLoading = true;
        loadedFiles.Clear();
        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
                selectedFiles = e.GetMultipleFiles();

                var trustedFileNameForFileStorage = Path.GetRandomFileName();

                //var path = Path.Combine(env.ContentRootPath,env.EnvironmentName);

                var path = Path.Combine(env.ContentRootPath + "\\wwwroot\\images\\File\\TDS", file.Name);

                //var path = $"{env.WebRootPath}\\File\\TDS\\{file.Name}";
                //var path = @"C:\Users\Administrator\Downloads\"+file.Name;
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);

                itemTDS.Add(file.Name);
                selectedTDS = selectedFiles;
                selectedFiles = null;
            }
            catch (Exception ex)
            {
                //Logger.LogError("File: {Filename} Error: {Error}",
                //    file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
}
