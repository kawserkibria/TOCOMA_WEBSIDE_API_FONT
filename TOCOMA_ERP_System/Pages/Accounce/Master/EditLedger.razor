@page "/EditLedger/{LEDGER_SERIAL}"
@layout CustomLayout
@inject IToastService toastService
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager UriHelper

<div class="container">
    <EditForm Model="@ledger" OnValidSubmit="@SaveLadger">
        <div class="card">
            <div class="card-header"><a href="Ledgers">Ledger List</a>/ Edit</div>
            <div class="testbox">
                <div class="form">
                    <div class="item">
                        <label for="fname">Name</label>
                        @*<input id="fname" type="text" name="fname" required />*@
                        <InputText @bind-Value="@ledger.LEDGER_NAME" type="text" />
                    </div>
                    <div class="item">
                        <label for="fname">Under</label>
                        <InputSelect @bind-Value="@ledger.LEDGER_PARENT_GROUP" class="form-control">
                            <option></option>
                            @foreach (var item in ledgerGroupList)
                            {
                                <option value="@item.GR_NAME">@item.GR_NAME</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="colums">
                        <div class="item">
                            <label for="fname">Currency</label>
                            <InputSelect @bind-Value="@ledger.LEDGER_CURRENCY_SYMBOL" @onchange="CurrencyClicked" class="form-control">
                                <option value="BDT">BDT</option>
                                @foreach (var item in currencyList)
                                {
                                    <option value="@item.CURRENCY_NAME">@item.CURRENCY_NAME</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <div class="colums">
                        <div class="item">
                            <label for="fname">Opening Balance</label>
                            <InputNumber @bind-Value="@ledger.LEDGER_OPENING_BALANCE" type="text" class="form-control" />

                        </div>
                        <div class="item">
                            <label for="lname"></label>
                            <input type="text" class="form-control" style="width:50px" @onkeypress="@Keypress" value="@MyProperty" />
                        </div>
                        <div class="item">
                            <label for="address1">Address 1</label>
                            <InputText @bind-Value="@ledger.LEDGER_ADDRESS1" type="text" class="form-control" />
                        </div>
                        <div class="item">
                            <label for="address2">Address 2</label>
                            <InputText @bind-Value="@ledger.LEDGER_ADDRESS2" type="text" class="form-control" />
                        </div>
                        <div class="item">
                            <label for="city">Country</label>
                            <InputSelect @bind-Value="@ledger.LEDGER_COUNTRY" class="form-control">
                                <option value="BANGLADESH">BANGLADESH</option>
                                @foreach (var item in countryList)
                                {
                                    <option value="@item.COUNTRY_NAME">@item.COUNTRY_NAME</option>
                                }

                            </InputSelect>
                        </div>
                        <div class="item">
                            <label for="city">City</label>
                            <InputText @bind-Value="@ledger.LEDGER_CITY" type="text" class="form-control" />
                        </div>
                        <div class="item">
                            <label for="zip">Zip/Postal Code</label>
                            <InputText @bind-Value="@ledger.LEDGER_POSTAL" type="text" class="form-control" />
                        </div>
                        <div class="item">
                            <label for="phone">Phone</label>
                            <InputText @bind-Value="@ledger.LEDGER_PHONE" type="text" class="form-control" />
                        </div>
                        <div class="item">
                            <label for="fax">Fax</label>
                            <InputText @bind-Value="@ledger.LEDGER_FAX" type="text" class="form-control" />
                        </div>
                        <div class="item">
                            <label for="eaddress">Email Address</label>
                            <InputText @bind-Value="@ledger.LEDGER_EMAIL" type="text" class="form-control" />
                        </div>
                        <div class="item">
                            <label for="eaddress">Comments</label>
                            <InputText @bind-Value="@ledger.LEDGER_COMMENTS" type="text" class="form-control" />
                        </div>
                        <div class="item">
                            <label for="state">Status</label>
                            <InputSelect @bind-Value="@ledger.LEDGER_STATUS" class="form-control">
                                <option></option>
                                <option value="0">No</option>
                                <option value="1">Yes</option>
                            </InputSelect>
                        </div>
                    </div>
                </div>
            </div>
            <div class="btn-block">
                <button type="submit" style="width:120px;margin-right:10px">Update</button>
                <button type="button" style="width:90px" class="btn btn-danger" @onclick="CloseClicked">Close</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public string LEDGER_SERIAL { get; set; }
    LedgerModel ledger = new LedgerModel();
    List<LedgerGroupModel> ledgerGroupList = new List<LedgerGroupModel>();
    List<CountryModel> countryList = new List<CountryModel>();
    List<CurrencyModel> currencyList = new List<CurrencyModel>();
    List<LedgerModel> ledgerList = new List<LedgerModel>();
    string data;
    string MyProperty;
    string itemname = "";
    protected override async Task OnInitializedAsync()
    {
        ledgerGroupList = await Http.GetJsonAsync<List<LedgerGroupModel>>(Utility.BaseUrl + "api/Setup/GetLedgerGroup");
        countryList = await Http.GetJsonAsync<List<CountryModel>>(Utility.BaseUrl + "api/Setup/GetCountry");
        currencyList = await Http.GetJsonAsync<List<CurrencyModel>>(Utility.BaseUrl + "api/Setup/GetCurrency");
        await GetLedger();


    }
    private async Task GetLedger()
    {
        ledger = await Http.GetJsonAsync<LedgerModel>(Utility.BaseUrl + "api/Setup/GetLedgerByCode/" + LEDGER_SERIAL);
        if(ledger.LEDGER_OPENING_BALANCE <0)
        {
            MyProperty = "Dr";
            string balance = Convert.ToString(ledger.LEDGER_OPENING_BALANCE).Replace("-", "");
            ledger.LEDGER_OPENING_BALANCE = Convert.ToDecimal(balance);
        }
        else if (ledger.LEDGER_OPENING_BALANCE>0)
            {
                MyProperty = "Cr";
            }
        else { MyProperty = "Dr"; }


    }
    public async Task SaveLadger()
    {
        //if (IsValidation() != true)
        //{
        try
        {
            ledger.ENTRYBY = "Asaduzzaman";
            ledger.UPDATEBY = "Asaduzzaman";
            if (ledger.LEDGER_CURRENCY_NAME == null || ledger.LEDGER_CURRENCY_NAME == "")
            { ledger.LEDGER_CURRENCY_NAME = "BDT"; }
            if (ledger.LEDGER_COUNTRY == null || ledger.LEDGER_COUNTRY == "")
            { ledger.LEDGER_COUNTRY = "BANGLADESH"; }
            //ledger.LEDGER_CURRENCY_SYMBOL = currencyList.Find(x => x.CURRENCY_NAME == ledger.LEDGER_CURRENCY_NAME).CURRENCY_SYMBOL;
            ledger.LEDGER_GROUP = 0;
            ledger.LEDGER_PRIMARY_TYPE = 0;
            ledger.LEDGER_DEFAULT = 0;
            ledger.LEDGER_NAME_DEFAULT = ledger.LEDGER_NAME;
            ledger.LEDGER_CASH_FLOW_TYPE = 0;
            //ledger.LEDGER_PARENT_GROUP = "";
            ledger.LEDGER_PRIMARY_GROUP = "";
            ledger.LEDGER_ONE_DOWN = "";
            ledger.LEDGER_FC_OPENING_BALANCE = 0;
            ledger.DR_CR = MyProperty;
            //if(MyProperty=="Dr")
            //{ ledger.LEDGER_OPENING_BALANCE = -System.Math.Abs(ledger.LEDGER_OPENING_BALANCE); }
            var data = await Http.PutJsonAsync<LedgerModel>(Utility.BaseUrl + "api/Setup/UpdateLedger", ledger);
            toastService.ShowSuccess("Update Successfully!!!");
        }
        catch (Exception ex)
        {

        }
    }
    private async Task AutoCompleteClicked(ChangeEventArgs change)
    {
        string value;
        value = change.Value.ToString();
        if (value == "c" || value == "C")
        { MyProperty = "Cr"; }
        else if (value == "d" || value == "D")
        { MyProperty = "Dr"; }

        StateHasChanged();
    }
    private void NameChanged(string value)
    {
        if (value == "c" || value == "C")
        { MyProperty = "Cr"; }
        else if (value == "d" || value == "D")
        { MyProperty = "Dr"; }
        StateHasChanged();

    }
    private void Keypress(KeyboardEventArgs args)
    {
        //KeyPressed = "Key Pressed is " + args.Key;
        string value;
        value = args.Key;
        if (value == "c" || value == "C")
        { MyProperty = "Cr"; }
        else if (value == "d" || value == "D")
        { MyProperty = "Dr"; }
        StateHasChanged();
    }
    public async Task CurrencyClicked(ChangeEventArgs change)
    {
        ledger.LEDGER_CURRENCY_NAME = change.Value.ToString();
    }
    void CloseClicked() { UriHelper.NavigateTo("Ledgers"); }
}
