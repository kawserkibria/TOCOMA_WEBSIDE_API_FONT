@page "/Ledgers"
@layout CustomLayout
@inject IToastService toastService
@inject HttpClient Http
@inject IJSRuntime JSRuntime





<div class="card">
    <div class="card-header">
        List /
        <a href="LadgerForm">New</a>
        &nbsp;<a style="margin-left:200px" href="ChartOfAccounts">Chart Of Accounts</a>
    </div>
    <div class="testbox">
        <div class="tablearea">
            <table id="example" class="display" style="width:100%">
                <thead>
                    <tr>  
                        <th>Ledger Name</th>
                        <th>Group Name</th>  
                        <th>Debit</th>
                        <th>Credit</th>

                        <th></th>
                        <th></th>
                    </tr>

                </thead>
                <tbody>
                    @if (ledger_List != null)
                    {
                        foreach (var item in ledger_List)
                        {
                            <tr>       
                                <td>@item.LEDGER_NAME</td>
                                <td>@item.LEDGER_PARENT_GROUP</td>
                                <td>@item.LEDGER_DEBIT_BALANCE</td>
                                <td>@item.LEDGER_CREDIT_BALANCE</td>                                
                                <td style="text-align:center;width:6%"><a href="EditLedger/@item.LEDGER_SERIAL"><span class="oi oi-pencil"></span></a></td>
                                <td style="text-align:center;width:6%"><a @onclick=@(() => DeleteLedger(item.LEDGER_NAME))><span style="color:red" class="oi oi-trash"></span></a></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>

    </div>
</div>



@*----Group Modal-----------*@


<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <EditForm Model="@ledger">
                <div class="modal-header">
                    <h4 class="p-2"><span class="text-uppercase">Ladger</span>  </h4>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Ledger Name :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_NAME" type="text" class="form-control" placeholder="Enter Ledger Name here..." />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Currency Symbol :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_CURRENCY_SYMBOL" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Parent Group :</label>
                        <div class="col-sm-19">
                            <InputText @bind-Value="@ledger.LEDGER_PARENT_GROUP" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-2 col-form-label">Ladger Status</label>
                        <div class="col-sm-10">
                            <InputSelect @bind-Value="@ledger.LEDGER_STATUS" class="form-control">
                                <option></option>
                                <option value="0">No</option>
                                <option value="1">Yes</option>
                            </InputSelect>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-2 col-form-label">Opening Balance :</label>
                        <div class="col-sm-10">
                            <InputNumber @bind-Value="@ledger.LEDGER_OPENING_BALANCE" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Address 1 :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_ADDRESS1" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Address 2 :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_ADDRESS2" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">City :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_CITY" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Postal :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_POSTAL" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Fax :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_FAX" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Phone :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_PHONE" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Email :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_EMAIL" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Country :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_COUNTRY" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Comments :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_COMMENTS" type="text" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="colFormLabel" class="col-sm-3 col-form-label">Benefit :</label>
                        <div class="col-sm-9">
                            <InputText @bind-Value="@ledger.LEDGER_BENEFIT" type="text" class="form-control" />
                        </div>
                    </div>

                </div>
                <div class="modal-footer">
                    <div>
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        <button type="submit" style="width:100px;margin-right:20px" class="btn btn-info" data-dismiss="modal" @onclick=@(() => SaveGroups())>@btnLabel</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
@code {
    LedgerModel ledger = new LedgerModel();
    List<LedgerModel> ledgerList = new List<LedgerModel>();
    List<LedgerModel> ledger_List = new List<LedgerModel>();
    List<BranchModel> branchList = new List<BranchModel>();
    List<LedgerGroupModel> ledgerGroupList = new List<LedgerGroupModel>();
    List<LedgerGroupModel> ledgerGrList = new List<LedgerGroupModel>();
    List<LedgerGroupModel> ledGrList = new List<LedgerGroupModel>();
    LedgerGroupModel lgModel = new LedgerGroupModel();
    string btnLabel;
    protected override async Task OnInitializedAsync()
    {
        btnLabel = "Save";
        await GetLedger();
        ledgerGroupList = await Http.GetJsonAsync<List<LedgerGroupModel>>(Utility.BaseUrl + "api/Transection/GetLedgerGroupList");
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");

        foreach (var grItem in ledgerGroupList)
        {
            lgModel = new LedgerGroupModel();
            //lgModel.ledgerNameList = new List<LedgerModel>();
            lgModel = grItem;
            foreach (var lName in ledgerList)
            {

                //var item = ledgerList.Find(o => o.LEDGER_PARENT_GROUP == grItem.GR_NAME);
                if (lName.LEDGER_PARENT_GROUP == grItem.GR_NAME)
                {
                    ledger = new LedgerModel();
                    if (lgModel.ledgerNameList == null)
                    {
                        lgModel.ledgerNameList = new List<LedgerModel>();
                    }

                    ledger.LEDGER_NAME = lName.LEDGER_NAME;
                    lgModel.ledgerNameList.Add(ledger);

                    ledgerGrList.Add(lgModel);

                }
                ledGrList = ledgerGrList;
            }

        }

    }
    public async Task GetLedger()
    {
        ledgerList = new List<LedgerModel>();
        ledger_List = new List<LedgerModel>();
        try
        {
            ledgerList = await Http.GetJsonAsync<List<LedgerModel>>(Utility.BaseUrl + "api/Setup/GetLedger");

            foreach (var item in ledgerList)
            {
                ledger = new LedgerModel();
                ledger.LEDGER_SERIAL = item.LEDGER_SERIAL;
                ledger.LEDGER_PARENT_GROUP = item.LEDGER_PARENT_GROUP;
                ledger.LEDGER_NAME = item.LEDGER_NAME;
                ledger.LEDGER_OPENING_BALANCE = item.LEDGER_OPENING_BALANCE;
                if (item.LEDGER_OPENING_BALANCE < 0)
                {
                    string b = Convert.ToString(item.LEDGER_OPENING_BALANCE).Replace("-", "");
                    ledger.LEDGER_DEBIT_BALANCE = Convert.ToDecimal(b);
                }
                if (item.LEDGER_OPENING_BALANCE > 0)
                { ledger.LEDGER_CREDIT_BALANCE = item.LEDGER_OPENING_BALANCE; }
                ledger_List.Add(ledger);

            }
            StateHasChanged();
            await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
        }
        catch(Exception ex)
        {

        }

    }
    public async Task SaveGroups()
    {
        if (IsValidation() != true)
        {
            try
            {
                var data = await Http.PostJsonAsync<BranchModel>(Utility.BaseUrl + "api/Setup/AddBranch", ledger);
                toastService.ShowSuccess("Item Added Successfully!!!");
            }
            catch (Exception ex)
            {

            }
        }
    }
    private bool IsValidation()
    {
        bool flag = false;
        if (ledger.LEDGER_NAME == "" || ledger.LEDGER_NAME == string.Empty || ledger.LEDGER_NAME == null)
        {
            toastService.ShowWarning("Branch Name cannot be empty!");
            flag = true;
        }

        return flag;
    }
    private void EditClick(int Code)
    {
        btnLabel = "Update";
        //branch = branchList.FirstOrDefault(x => x.BRANCH_ID == branchCode);
    }
    private async Task DeleteLedger(string name)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
            return;
        bool isExist = await Http.GetJsonAsync<bool>(Utility.BaseUrl + "api/Setup/GetLedgerByGRName/" + name);
        if (isExist != true)
        { await Http.DeleteAsync(Utility.BaseUrl + "api/Setup/DeleteLedgerByName/" + name); }
        else { toastService.ShowWarning("Default Ledger Can not be deleted."); }
        await GetLedger();
    }
}
