@page "/EditRequisition/{RequisitionNo}"
@layout CustomLayout
@inject HttpClient Http
@inject IToastService toastService
@inject IJSRuntime JSRuntime
@using Blazored.Typeahead
@inject ProtectedLocalStorage ProtectedLocalStore
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<style>


    table {
        border-collapse: collapse;
    }

    th,
    td {
        border: 1px solid #888;
    }

    tr td {
        text-align: center;
    }

    tr th {
        text-align: center;
    }

    table td input {
        width: 100%;
    }
</style>
<div class="dashboard-details">
    <h4 class="p-2"><img src="images/fountain-pen.png" alt="" width="50" height="50" class="mr-3"><span class="text-uppercase">UPDATE Requisition</span>  </h4>
    <div class="newRequsitionForm-content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-12">
                    <EditForm Model="@purchaseRequisition" OnValidSubmit="@SavePurchaseRequision">
                        <div class="col-lg-6">
                            @*<div class="row">
                                    <div class="col-md-6"><label>Requisition NO:</label></div>
                                    <div class="col-md-6">
                                        <InputText @bind-Value="@purchaseRequisition.REQUISITION_NO" disabled="@REQ_IS_DISABLE" style="width:203px"></InputText>

                                    </div>
                                </div>*@
                            @*<div class="row mt-1">
                                    <div class="col-md-6"><label>Requester:</label></div>
                                    <div class="col-md-6"><InputText @bind-Value="@purchaseRequisition.REQUESTED_BY" style="width:203px"></InputText></div>
                                </div>*@
                            @*<div class="row mt-1">
                                    <div class="col-md-6"><label>Request Department:</label></div>
                                    <div class="col-md-6">
                                        <InputSelect @bind-Value="@purchaseRequisition.REQUEST_DEPARTMENT_ID" style="width:203px;height:28px">
                                            <option value="">--Select Department--</option>
                                            @foreach (var department in departmentList)
                                            {
                                                <option value="@department.DEPARTMENT_ID">@department.DEPARTMENT_NAME</option>
                                            }
                                        </InputSelect>
                                    </div>
                                </div>*@
                            <div class="row ">
                                <div class="col-md-3"><label>Request Receive Department:</label></div>
                                <div class="col-md-9">
                                    <InputSelect @bind-Value="@purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID" style="width:203px;height:28px">
                                        <option value="">--Select Department--</option>
                                        @foreach (var department in departmentList)
                                        {
                                            <option value="@department.DEPARTMENT_ID">@department.DEPARTMENT_NAME</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>
                            @*<div class="row mt-1">
                                    <div class="col-md-4"><label>Request Date:</label></div>
                                    <div class="col-md-8"><td><input type="text" id="edit_datepicker_planstart" autocomplete="off" @bind-value="@request_date" /></td></div>
                                </div>*@
                            @*<div class="row mt-1">
                                    <div class="col-md-6"><label>Request Date:</label></div>
                                    <div class="col-md-6"><input type="text" id="datepicker_planstart" style="width:203px;height:28px" autocomplete="off" @bind-value="@request_date" placeholder="dd/mm/yy" /></div>
                                </div>*@
                            <div class="row mt-1">
                                <div class="col-md-3"><label>Require Date:</label></div>
                                <div class="col-md-9"><input type="text" id="datepicker_actualstart" @bind-value="@require_date" autocomplete="off" style="width:203px;height:28px" placeholder="dd/mm/yy" /></div>
                            </div>
                            <div class="row mt-1">
                                <div class="col-md-3"><label>Request For:</label></div>
                                <div class="col-md-9">
                                    <InputSelect name="" id="" @bind-Value="@purchaseRequisition.REQUEST_FOR" style="width:203px;height:28px">
                                        <option value=""></option>
                                        <option value="Material">Material</option>
                                        <option value="Service">Service</option>
                                        <option value="Service">Machinery Purchase</option>
                                        <option value="Others Official">Others Official</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="row mt-1">
                                <div class="col-md-3"><label>Priority:</label></div>
                                <div class="col-md-9">
                                    <InputSelect name="" id="" @bind-Value="@purchaseRequisition.PRIORITY" style="width:203px;height:28px">
                                        <option value=""></option>
                                        <option value="Urgent">Urgent</option>
                                        <option value="High">High</option>
                                        <option value="Medial">Medial</option>
                                        <option value="Low">Low</option>
                                    </InputSelect>
                                </div>
                            </div>
                            <div class="row mt-1">
                                <div class="col-md-3"><label>Purpose of Requisition:</label></div>
                                <div class="col-md-9">
                                    <InputTextArea @bind-Value="@purchaseRequisition.REQUISITION_PURPOSE" cols="30" rows="3"></InputTextArea>
                                </div>
                            </div>
                            <div class="row mt-1">
                                <div class="col-md-3"><label>Payment Mode:</label></div>
                                <div class="col-md-9" style="float:left">
                                    <input style="width:20px" type="checkbox" checked="@PaymentMode_ChequeStatus" @onchange="eventArgs => { PaymentMode_ChequeClicked( eventArgs.Value); }" />&nbsp;Cheque &nbsp;
                                    <input style="width:20px" type="checkbox" checked="@PaymentMode_CashStatus" @onchange="eventArgs => { PaymentMode_CashClicked( eventArgs.Value); }" />&nbsp;Cash &nbsp;
                                    <input style="width:20px" type="checkbox" checked="@PaymentMode_PayorderStatus" @onchange="eventArgs => { PaymentMode_PayorderClicked( eventArgs.Value); }" />&nbsp;Payorder &nbsp; <br />
                                    <input style="width:20px" type="checkbox" checked="@PaymentMode_TTStatus" @onchange="eventArgs => { PaymentMode_TTClicked( eventArgs.Value); }" />&nbsp;T/T &nbsp;
                                    <input style="width:20px" type="checkbox" checked="@PaymentMode_InAdvanceStatus" @onchange="eventArgs => { PaymentMode_InAdvanceClicked( eventArgs.Value); }" />&nbsp;In Advance &nbsp;
                                    <input style="width:20px" type="checkbox" checked="@PaymentMode_OthersStatus" @onchange="eventArgs => { PaymentMode_OthersClicked( eventArgs.Value); }" />&nbsp;Others &nbsp;
                                </div>
                            </div>
                            @if (checked_cheque == true)
                            {
                                <div class="row mt-1">

                                    <div class="col-md-3"><label>Cheque Date:</label></div>
                                    <div class="col-md-9">
                                        <input type="text" id="datepicker_plansdone" @bind-value="@cheque_Date" style="width:203px;height:28px" />
                                    </div>

                                </div>
                            }
                            else { }

                        </div>



                        @*<div class="row mt-1">
                                <div class="col-md-5"><label>Requisition Total:</label></div>
                                <div class="col-md-7">@requisitionTotal</div>
                            </div>*@

                        <br />
                        @*<div class="row mt-4 border-top">
                                <div class="col-md-7">
                                    <div class="row">
                                        <div class="col-5"></div>
                                        <div class="col-6" padding-top:20px>
                                            <div class="form-group form-check d-flex align-items-center">
                                                <input type="submit" class="btn btn-primary" value="Save as Requisition" />
                                            </div>
                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-5"></div>
                            </div>*@
                        @*<div class="row mt-4 border-top" style="padding:20px 0 20px">
                                <div class="col-md-12">
                                    <div class="row">
                                        <div class="col-5"></div>
                                        <div class="col-6">
                                            <button type="submit" class="btn btn-info" style="width:100px">Save as Requisition</button>

                                        </div>
                                    </div>

                                </div>
                                <div class="col-md-5"></div>

                            </div>*@
                    </EditForm>
                    <div style="margin-bottom:100px">
                        <table width="55%">
                            <tr>
                                <th style="width:27%">Item</th>
                                <th style="width:7%">Quantity</th>
                                <th style="width:7%">Rate</th>
                                <th style="width:7%">Amount</th>
                                <th style="width:7%"></th>
                            </tr>
                            <tr>



                                <td>
                                    <input type="text" @bind-value="@itemname" list="txtSearch" />
                                    <datalist id="txtSearch">
                                        @foreach (var product in productList)
                                        {
                                            <option>@product.ITEM_NAME</option>
                                        }
                                    </datalist>
                                </td>
                                <td><input type="text" @bind-value="@q" id="quantity" /></td>
                                <td><input type="text" @bind-value="@r" /></td>
                                <td></td>
                                <td><button class="btn btn-primary btn-sm" @onclick=@(() => AddItem())>Add</button></td>
                                @*<td><input type="text" /></td>
                                    <td><input type="text" /></td>
                                    <td>0.00</td>*@



                            </tr>
                            <tr>
                                <th>
                                    <a href="#" data-toggle="modal" data-target=".bd-example-modal-lg" style="font-size:13px;text-decoration:none">Add Item Description &nbsp;<span class="oi oi-pencil"></span></a>
                                </th>
                            </tr>
                            <tbody>
                                @foreach (var tableitem in requestItemList)
                                {
                                    <tr>
                                        <td>
                                            @tableitem.ITEM_NAME <br />
                                            @((MarkupString)tableitem.ITEM_DESCRIPTION)
                                        </td>
                                        @*<td>@tableitem.PACK_SIZE</td>
                                            <td>@tableitem.UOM</td>*@
                                        <td>@tableitem.Quantity</td>
                                        <td>@tableitem.Rate</td>
                                        <td>@tableitem.Total</td>
                                        <td><a @onclick=@(() => EditItem(tableitem.ITEM_NAME))><span class="oi oi-pencil"></span></a>&nbsp; &nbsp;<a @onclick=@(() => DeleteItem(tableitem.ITEM_NAME))><span class="oi oi-delete"></span></a></td>
                                    </tr>
                                }
                            </tbody>
                        </table>


                        <br />
                        <br />

                        @*----------OthersItem Table-------------*@
                        <table width="55%">
                            <tr>
                                <th style="width:27%">Others</th>
                                <th style="width:7%">Quantity</th>
                                <th style="width:7%">Rate</th>
                                <th style="width:7%">Amount</th>
                                <th style="width:7%"></th>
                            </tr>
                            <tr>



                                <td>
                                    <input type="text" @bind-value="othersItemName" />

                                </td>
                                <td><input type="text" @bind-value="othersitemQuantity" /></td>
                                <td><input type="text" @bind-value="OthersitemRate" /></td>
                                <td></td>
                                <td><button class="btn btn-primary btn-sm" @onclick=@(() => AddOthersItem())>Add</button></td>




                            </tr>
                            <tbody>
                                @foreach (var otherItem in othersItemList)
                                {
                                    <tr>
                                        <td>@otherItem.OTHERS_ITEM</td>
                                        <td>@otherItem.QUANTITY</td>
                                        <td>@otherItem.RATE</td>
                                        <td>@otherItem.TOTAL</td>
                                        <td><a @onclick=@(() => EditOthersItem(otherItem.OTHERS_ITEM))><span class="oi oi-pencil"></span></a>&nbsp; &nbsp;<a @onclick=@(() => DeleteOthersItem(otherItem.OTHERS_ITEM))><span class="oi oi-delete"></span></a></td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <br />
                        <br />

                        <table width="55%" style="margin-bottom:100px">
                            @*<tr>
                                    <td style="width:27%">Sub Total</td>
                                    <td style="width:7%">@requisitionTotal</td>
                                </tr>
                                <tr>
                                    <td style="width:27%">LC Amount</td>
                                    <td style="width:7%"><input type="text" @oninput="LC_Amount_Clicked" /></td>
                                </tr>
                                <tr>
                                    <td style="width:27%">LC Commission</td>
                                    <td style="width:7%"><input type="text" @oninput="LC_Commission_Clicked" /></td>
                                </tr>
                                <tr>
                                    <td style="width:27%">Insurance</td>
                                    <td style="width:7%"><input type="text" @oninput="Insurance_Clicked" /></td>
                                </tr>*@
                            <tr>
                                <td style="width:27%">Total</td>
                                <td style="width:7%">@GrandTotal</td>
                            </tr>
                            <tr>
                                <td colspan="2" style="width:27%;text-align:left">In Words(BDT)  : @Inwords</td>
                            </tr>
                        </table>
                        <br />
                        <button type="submit" @onclick="SavePurchaseRequision" class="btn btn-info" style="width:150px">Update</button>
                    </div>
                </div>
                <hr />


            </div>


        </div>
    </div>
</div>


@*//--------------Modal Item Description-----*@
<div class="modal fade bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="col-md-12">
        </div>
        <div class="modal-content">
            <div class="modal-header">

                <div class="form-outline">
                    <h4 class="p-2"><img src="images/fountain-pen.png" alt="" width="50" height="50" class="mr-3"><span class="text-uppercase"> ITEM DESCRIPTION</span>  </h4>
                </div>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <BlazoredTextEditor @ref="@itemDescription">
                    <ToolbarContent>
                        <select class="ql-header">
                            <option selected=""></option>
                            <option value="1"></option>
                            <option value="2"></option>
                            <option value="3"></option>
                            <option value="4"></option>
                            <option value="5"></option>
                        </select>
                        <span class="ql-formats">
                            <button class="ql-bold"></button>
                            <button class="ql-italic"></button>
                            <button class="ql-underline"></button>
                            <button class="ql-strike"></button>
                        </span>
                        <span class="ql-formats">
                            <select class="ql-color"></select>
                            <select class="ql-background"></select>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-list" value="ordered"></button>
                            <button class="ql-list" value="bullet"></button>
                        </span>
                        <span class="ql-formats">
                            <button class="ql-link"></button>
                        </span>
                    </ToolbarContent>
                    <EditorContent>
                        @((MarkupString)details.ITEM_DESCRIPTION)

                    </EditorContent>
                </BlazoredTextEditor>
            </div>

            <div class="modal-footer">
                @*<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Send message</button>*@
                <div>
                    <button class="btn btn-info" data-dismiss="modal" style="border:none;width:120px;float:right;margin-left:10px" @onclick=@(() => AddItem())>Add</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>

                </div>
            </div>

        </div>
    </div>
</div>




@code {

    private List<PurchaseRequisitionEntity> Customers { get; set; }
    PurchaseRequisitionEntity purchaseRequisition = new PurchaseRequisitionEntity();
    PurchaseRequisitionViewEntity requisitionView = new PurchaseRequisitionViewEntity();
    List<PurchaseRequisitionDetailsEntity> requisitionDetailsEntities = new List<PurchaseRequisitionDetailsEntity>();
    PurchaseRequisitionDetailsEntity details = new PurchaseRequisitionDetailsEntity();
    PurchaseRequisitionOthersModel reqOthers = new PurchaseRequisitionOthersModel();
    List<PurchaseRequisitionOthersModel> reqOthersList = new List<PurchaseRequisitionOthersModel>();
    List<DepartmentEntity> departmentList = new List<DepartmentEntity>();
    List<ItemEntity> productList = new List<ItemEntity>();
    private ItemEntity SelectedArticle;
    List<OrderItemEntity> requestItemList = new List<OrderItemEntity>();
    List<OthersRequisitionItemsModel> othersItemList = new List<OthersRequisitionItemsModel>();
    OthersRequisitionItemsModel othersItem = new OthersRequisitionItemsModel();
    string searchitem = "";
    OrderItemEntity orderitem;
    OrderItemEntity order_itm = null;
    BlazoredTextEditor itemDescription;
    [Parameter]
    public string RequisitionNo { get; set; }
    string q = "";
    string r = "";
    string itemname = "";
    double requisitionTotal = 0;
    double othersSubTotal = 0;
    //DateTime request_date = System.DateTime.Now;
    string request_date;
    string require_date;
    int tablerow;
    string selected_department;
    int selected_department_Id;
    string cheque_Date;
    bool checked_cheque;
    decimal GrandTotal;
    decimal LC_AMOUNT;
    decimal LC_COMMISSION;
    decimal INSURANCE;
    string Inwords;
    string othersItemName;
    string othersitemQuantity;
    string OthersitemRate;
    string reqNo;
    protected bool REQ_IS_DISABLE { get; set; }

    protected bool PaymentMode_ChequeStatus { get; set; }
    protected bool PaymentMode_CashStatus { get; set; }
    protected bool PaymentMode_PayorderStatus { get; set; }
    protected bool PaymentMode_TTStatus { get; set; }
    protected bool PaymentMode_InAdvanceStatus { get; set; }
    protected bool PaymentMode_OthersStatus { get; set; }

    protected override async Task OnInitializedAsync()
    {
        tablerow = 1;
        //itemname = itemname + "_" + tablerow;
        await DepartmentList();
        await GetItemList();
        //await GetReqNo();
        await GetReqInfo();
        TotalCalculation();
        StateHasChanged();
    }
    private async Task GetReqInfo()
    {
        requisitionView = await Http.GetJsonAsync<PurchaseRequisitionViewEntity>(Utility.BaseUrl + "api/Purchase/GetPurchaseRequisitionInfoByNo/" + RequisitionNo);
        requestItemList= await Http.GetJsonAsync<List<OrderItemEntity>>(Utility.BaseUrl + "api/Purchase/GetRequisitionItemDetailsByReqNo/" + RequisitionNo);
        othersItemList=await Http.GetJsonAsync<List<OthersRequisitionItemsModel>>(Utility.BaseUrl + "api/Purchase/GetRequisitionOthersItemDetailsByReqNo/" + RequisitionNo);
        purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID = requisitionView.REQUEST_RECEIVE_DEPARTMENT_ID;
        require_date = requisitionView.REQUIRED_DATE;
        purchaseRequisition.REQUEST_FOR = requisitionView.REQUEST_FOR;
        purchaseRequisition.PRIORITY = requisitionView.PRIORITY;
        purchaseRequisition.REQUISITION_PURPOSE = requisitionView.REQUISITION_PURPOSE;
        if (requisitionView.PAYMENT_MODE == "Cheque")
        {
            PaymentMode_ChequeStatus = true;
        }
        if (requisitionView.PAYMENT_MODE == "Cash")
        {
            PaymentMode_CashStatus = true;
        }
        if (requisitionView.PAYMENT_MODE == "Payorder")
        {
            PaymentMode_PayorderStatus = true;
        }
        if (requisitionView.PAYMENT_MODE == "TT")
        {
            PaymentMode_TTStatus = true;
        }
        if (requisitionView.PAYMENT_MODE == "InAdvance")
        {
            PaymentMode_InAdvanceStatus = true;
        }
        if (requisitionView.PAYMENT_MODE == "Others")
        {
            PaymentMode_OthersStatus = true;
        }




    }

    private async Task GetItemList()
    {
        productList = await Http.GetJsonAsync<List<ItemEntity>>(Utility.BaseUrl + "api/Product");
    }


    private async Task<IEnumerable<ItemEntity>> SearchArticles(string searchText)
    {
        searchitem = searchText;
        return await Task.FromResult(productList.Where(x => x.ITEM_NAME.ToLower().Contains(searchText.ToLower())));
    }
    private async Task DepartmentList()
    {
        departmentList = await Http.GetJsonAsync<List<DepartmentEntity>>(Utility.BaseUrl + "api/Department");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JSRuntime.InvokeVoidAsync("JsInteropDatepicker");
    }
    private void Add()
    {
        tablerow = tablerow + 1;
        itemname = itemname + "_" + tablerow;
        StateHasChanged();
    }
    protected async Task AddItem()
    {
        if (IsValidation_Table_Item() != true)
        {
            bool alreadyExists = productList.Any(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim());
            order_itm = new OrderItemEntity();
            order_itm.ITEM_NAME = itemname;
            order_itm.ITEM_DESCRIPTION = await this.itemDescription.GetHTML();
            order_itm.Quantity = Convert.ToDouble(q);
            order_itm.Rate = Convert.ToDouble(r);

            if (alreadyExists == true)
            {
                order_itm.ITEM_ID = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).ITEM_ID;
                order_itm.PACK_SIZE = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).PACK_SIZE;
                order_itm.UOM = productList.FirstOrDefault(x => x.ITEM_NAME.ToString().Trim() == itemname.ToString().Trim()).UOM;
            }
            else
            {
                order_itm.ITEM_ID = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Purchase/GetItemId/" + itemname);
            }

            order_itm.Total = Convert.ToDouble(order_itm.Quantity) * Convert.ToDouble(order_itm.Rate);
            requisitionTotal += order_itm.Total;
            requestItemList.Add(order_itm);

            q = "";
            r = "";
            itemname = "";
            TotalCalculation();
        }


    }
    protected async Task AddOthersItem()
    {
        othersItem = new OthersRequisitionItemsModel();
        othersItem.OTHERS_ITEM = othersItemName;
        if (othersitemQuantity != null && othersitemQuantity != "")
        { othersItem.QUANTITY = Convert.ToDouble(othersitemQuantity); }
        else { othersItem.QUANTITY = 0; }

        othersItem.RATE = Convert.ToDouble(OthersitemRate);
        if (othersitemQuantity != null && othersitemQuantity != "" && othersitemQuantity != "0") { othersItem.TOTAL = Convert.ToDouble(othersitemQuantity) * Convert.ToDouble(OthersitemRate); }
        else { othersItem.TOTAL = Convert.ToDouble(OthersitemRate); }

        othersSubTotal += othersItem.TOTAL;
        othersItemList.Add(othersItem);
        othersItemName = "";
        othersitemQuantity = "";
        OthersitemRate = "";
        TotalCalculation();
    }
    public async void DeleteOthersItem(string item)
    {
        var itemToRemove = othersItemList.Single(r => r.OTHERS_ITEM == item);
        othersItemList.Remove(itemToRemove);
        if (othersItemList.Count > 0)
        {
            othersSubTotal = 0;
            foreach (var _oitem in othersItemList)
            {
                othersSubTotal += _oitem.TOTAL;
            }
        }
        else { othersSubTotal = 0; }

        TotalCalculation();
        StateHasChanged();
    }
    //--------------
    public async void DeleteItem(string item)
    {
        var itemToRemove = requestItemList.Single(r => r.ITEM_NAME == item);
        requestItemList.Remove(itemToRemove);
        if (requestItemList.Count > 0)
        {
            requisitionTotal = 0;
            foreach (var _oitem in requestItemList)
            {
                requisitionTotal += _oitem.Total;
            }
        }
        else { requisitionTotal = 0; }

        TotalCalculation();
        StateHasChanged();
    }
    public async void EditItem(string item)
    {
        itemname = requestItemList.Single(r => r.ITEM_NAME == item).ITEM_NAME;
        q = Convert.ToString(requestItemList.Single(r => r.ITEM_NAME == item).Quantity);
        r = Convert.ToString(requestItemList.Single(r => r.ITEM_NAME == item).Rate);
        var itemToRemove = requestItemList.Single(r => r.ITEM_NAME == item);
        requestItemList.Remove(itemToRemove);
        if (requestItemList.Count > 0)
        {
            requisitionTotal = 0;
            foreach (var _oitem in requestItemList)
            {
                requisitionTotal += _oitem.Total;
            }
        }
        else { requisitionTotal = 0; }
        TotalCalculation();
        StateHasChanged();
    }
    //
    public async void EditOthersItem(string item)
    {
        othersItemName = othersItemList.Single(r => r.OTHERS_ITEM == item).OTHERS_ITEM;
        othersitemQuantity = Convert.ToString(othersItemList.Single(r => r.OTHERS_ITEM == item).QUANTITY);
        OthersitemRate = Convert.ToString(othersItemList.Single(r => r.OTHERS_ITEM == item).RATE);
        var itemToRemove = othersItemList.Single(r => r.OTHERS_ITEM == item);
        othersItemList.Remove(itemToRemove);
        if (othersItemList.Count > 0)
        {
            othersSubTotal = 0;
            foreach (var _oitem in othersItemList)
            {
                othersSubTotal += _oitem.TOTAL;
            }
        }
        else { othersSubTotal = 0; }
        TotalCalculation();
        StateHasChanged();
    }
    public async Task GetReqNo()
    {
        //var reqNo = await Http.GetJsonAsync<RequisitionNo>(Utility.BaseUrl + "api/Purchase/GetReqNo");
        reqNo = await Http.GetStringAsync(Utility.BaseUrl + "api/Purchase/GetReqNo");
        //purchaseRequisition.REQUISITION_NO = Convert.ToString(reqNo);


        string dName = departmentList.Find(x => x.DEPARTMENT_ID == purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID).DEPARTMENT_NAME;
        if (dName == "Accounts & Finance")
        {
            reqNo = reqNo + "AF";
            purchaseRequisition.REQUISITION_NO = reqNo;
        }
        else { purchaseRequisition.REQUISITION_NO = reqNo; }

        //REQ_IS_DISABLE = true;
        //StateHasChanged();


    }

    public async Task SavePurchaseRequision()
    {

        if (IsValidation() != true)
        {
            try
            {
                await GetReqNo();

                purchaseRequisition.REQUEST_DATE = System.DateTime.Now;
                purchaseRequisition.REQUIRED_DATE = require_date;//Convert.ToDateTime(require_date);
                purchaseRequisition.REQUISITION_TOTAL = requisitionTotal;
                //purchaseRequisition.REQUISITION_NO = reqNo;
                purchaseRequisition.REQUESTED_BY = await sessionStorage.GetItemAsync<string>("session_employeeName");
                purchaseRequisition.STATUS = "Open";
                purchaseRequisition.REG_BY = await sessionStorage.GetItemAsync<string>("session_employeeName");
                purchaseRequisition.REQUEST_DEPARTMENT_ID = await sessionStorage.GetItemAsync<int>("session_employeeDepartmentId");
                var data = await Http.PutJsonAsync<PurchaseRequisitionEntity>(Utility.BaseUrl + "api/Purchase", purchaseRequisition);
                var id = await Http.GetJsonAsync<int>(Utility.BaseUrl + "api/Purchase/GetPurchaseRequisitionId/" + purchaseRequisition.REQUISITION_NO);
                foreach (var item in requestItemList)
                {
                    details = new PurchaseRequisitionDetailsEntity();
                    details.PURCHASE_REQUISITION_ID = id;
                    details.REQUISITION_NO = purchaseRequisition.REQUISITION_NO;
                    details.ITEM_ID = item.ITEM_ID;
                    details.QUANTITY = item.Quantity;
                    details.RATE = item.Rate;
                    details.PACK_SIZE = item.PACK_SIZE;
                    details.UOM = item.UOM;
                    requisitionDetailsEntities.Add(details);
                }
                var requisition_details = await Http.PutJsonAsync<List<PurchaseRequisitionDetailsEntity>>(Utility.BaseUrl + "api/Purchase/AddPurchaseRequisitionDetails", requisitionDetailsEntities);
                foreach (var othersItem in othersItemList)
                {
                    reqOthers = new PurchaseRequisitionOthersModel();
                    reqOthers.PURCHASE_REQUISITION_ID = id;
                    reqOthers.REQUISITION_NO = purchaseRequisition.REQUISITION_NO;
                    reqOthers.OTHERS_ITEM = othersItem.OTHERS_ITEM;
                    reqOthers.QUANTITY = othersItem.QUANTITY;
                    reqOthers.RATE = othersItem.RATE;
                    reqOthersList.Add(reqOthers);
                }
                var requisition_Others = await Http.PutJsonAsync<List<PurchaseRequisitionOthersModel>>(Utility.BaseUrl + "api/Purchase/AddPurchaseRequisitionOthers", reqOthersList);
                toastService.ShowSuccess("Requisition Generate Successfully!!!");
                purchaseRequisition = new PurchaseRequisitionEntity();
                details = new PurchaseRequisitionDetailsEntity();
                reqOthers = new PurchaseRequisitionOthersModel();
            }
            catch (Exception ex)
            {

            }

        }
    }
    private bool IsValidation_Table_Item()
    {
        bool flag = false;
        if (itemname == "" || itemname == string.Empty || itemname == null)
        {
            toastService.ShowWarning("Please Select Item!");
            flag = true;
        }
        else if (q == "" || q == string.Empty || q == null)
        {
            toastService.ShowWarning("Quantity Field is Empty!");
            flag = true;
        }
        else if (r == "" || r == string.Empty || r == null)
        {
            toastService.ShowWarning("Rate Field is Empty!");
            flag = true;
        }
        return flag;
    }


    private bool IsValidation()
    {
        bool flag = false;
        //if (purchaseRequisition.REQUISITION_NO == "" || purchaseRequisition.REQUISITION_NO == string.Empty || purchaseRequisition.REQUISITION_NO == null)
        //{
        //    toastService.ShowWarning("Requisition No cannot be empty!");
        //    flag = true;
        //}
        //else if (purchaseRequisition.REQUESTED_BY == "" || purchaseRequisition.REQUESTED_BY == string.Empty || purchaseRequisition.REQUESTED_BY == null)
        //{
        //    toastService.ShowWarning("Requested By cannot be empty!");
        //    flag = true;
        //}
        //else if (purchaseRequisition.REQUEST_DEPARTMENT_ID == 0)
        //{
        //    toastService.ShowWarning("Please Select Department");
        //    flag = true;
        //}
        //else if (requestItemList.Count == 0)
        //{
        //    toastService.ShowWarning("Please Select Requisition Item");
        //    flag = true;
        //}

        return flag;
    }
    private void ClearData()
    {
        purchaseRequisition.REQUISITION_NO = "";
        purchaseRequisition.REQUESTED_BY = "";
        //purchaseRequisition.REQUEST_DATE = System.DateTime.Now;
        //purchaseRequisition.REQUIRED_DATE = System.DateTime.Now;
        purchaseRequisition.REQUEST_FOR = "";
        purchaseRequisition.REQUISITION_PURPOSE = "";
        requestItemList = null;

    }
    private async Task Requesst_Receive_Dept_Click(ChangeEventArgs changeEventArgs)
    {

        selected_department_Id = Convert.ToInt32(changeEventArgs.Value);
        selected_department = departmentList.Find(x => x.DEPARTMENT_ID == selected_department_Id).DEPARTMENT_NAME;
        StateHasChanged();
    }
    private async Task LC_Amount_Clicked(ChangeEventArgs lcAmount)
    {
        if (lcAmount.Value.ToString() != "0" && lcAmount.Value.ToString() != null && lcAmount.Value.ToString() != "")
        {
            LC_AMOUNT = Convert.ToDecimal(lcAmount.Value.ToString());
            TotalCalculation();
        }
        else
        {
            LC_AMOUNT = 0;
            TotalCalculation();
        }


    }
    private async Task LC_Commission_Clicked(ChangeEventArgs lcCommission)
    {
        if (lcCommission.Value.ToString() != "0" && lcCommission.Value.ToString() != null && lcCommission.Value.ToString() != "")
        {
            LC_COMMISSION = Convert.ToDecimal(lcCommission.Value.ToString());
            TotalCalculation();
        }
        else
        {
            LC_COMMISSION = 0;
            TotalCalculation();
        }

    }
    private async Task Insurance_Clicked(ChangeEventArgs Insurance)
    {
        if (Insurance.Value.ToString() != "0" && Insurance != null && Insurance.Value.ToString() != "")
        {
            INSURANCE = Convert.ToDecimal(Insurance.Value.ToString());
            TotalCalculation();
        }
        else
        {
            INSURANCE = 0;
            TotalCalculation();
        }

    }

    async void PaymentMode_ChequeClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            checked_cheque = true;
            purchaseRequisition.PAYMENT_MODE = "Cheque";
        }
        else
        {
            checked_cheque = false;
            cheque_Date = "";
            purchaseRequisition.PAYMENT_MODE = "";
        }
        StateHasChanged();
    }
    //PaymentMode_PayorderClicked(
    //PaymentMode_TTClicked( event
    //PaymentMode_InAdvanceClicked
    //PaymentMode_OthersClicked(e
    async void PaymentMode_CashClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Cash"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }

    }
    async void PaymentMode_PayorderClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Payorder"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_TTClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "TT"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_InAdvanceClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "InAdvance"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    async void PaymentMode_OthersClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        { purchaseRequisition.PAYMENT_MODE = "Others"; }
        else { purchaseRequisition.PAYMENT_MODE = ""; }
    }
    private void TotalCalculation()
    {
        //if (requisitionTotal != 0 || requisitionTotal != null)
        //{ GrandTotal = Convert.ToDecimal(requisitionTotal); }
        //if(LC_AMOUNT!=0||LC_AMOUNT!=null)
        //{ GrandTotal= }
        requisitionTotal = requestItemList.Sum(x => (x.Total));
        othersSubTotal= othersItemList.Sum(x => (x.TOTAL));

        GrandTotal = Convert.ToDecimal(requisitionTotal) + LC_AMOUNT + LC_COMMISSION + INSURANCE + Convert.ToDecimal(othersSubTotal);
        double inwordValue = Convert.ToDouble(GrandTotal);
        Inwords = NumberToWords.ConvertAmount(inwordValue);
    }
    private Task OnValueChanged(int value)
    {
        // Assign the selected value to the Model
        purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID = Convert.ToInt32(value);
        return Task.CompletedTask;
    }
    private async Task ReceiveDepartmentClicked(ChangeEventArgs changeEvent)
    {
        int changeId = Convert.ToInt32(changeEvent.Value.ToString());
        purchaseRequisition.REQUEST_RECEIVE_DEPARTMENT_ID = changeId;

    }


}
