@page "/"
@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject NavigationManager navmanager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js



<style>



    body {
        margin: 0;
        padding: 0;
        background-size: cover;
        font-family: 'Open Sans', sans-serif;
    }



    .box {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 30rem;
        padding: 3.5rem;
        box-sizing: border-box;
        border: 1px solid #dadce0;
        -webkit-border-radius: 8px;
        border-radius: 8px;
    }

        .box h2 {
            margin: 0px 0 -0.125rem;
            padding: 0;
            text-align: center;
            color: #202124;
            font-size: 24px;
            font-weight: 400;
        }

        .box .logo {
            display: flex;
            flex-direction: row;
            justify-content: center;
            margin-bottom: 16px;
        }

        .box p {
            font-size: 16px;
            font-weight: 400;
            letter-spacing: 1px;
            line-height: 1.5;
            margin-bottom: 24px;
            text-align: center;
        }

        .box .inputBox {
            position: relative;
        }

            .box .inputBox input {
                width: 93%;
                padding: 1.3rem 10px;
                font-size: 1rem;
                letter-spacing: 0.062rem;
                margin-bottom: 1.875rem;
                border: 1px solid #ccc;
                background: transparent;
                border-radius: 4px;
            }

            .box .inputBox label {
                position: absolute;
                top: 0;
                left: 10px;
                padding: 0.625rem 0;
                font-size: 1rem;
                color: gray;
                pointer-events: none;
                transition: 0.5s;
            }

            .box .inputBox input:focus ~ label,
            .box .inputBox input:valid ~ label,
            .box .inputBox input:not([value=""]) ~ label {
                top: -1.125rem;
                left: 10px;
                color: #1a73e8;
                font-size: 0.75rem;
                background-color: #fff;
                height: 10px;
                padding-left: 5px;
                padding-right: 5px;
            }

            .box .inputBox input:focus {
                outline: none;
                border: 2px solid #1a73e8;
            }

        .box input[type="submit"] {
            border: none;
            outline: none;
            color: #fff;
            background-color: #1a73e8;
            padding: 0.625rem 1.25rem;
            cursor: pointer;
            border-radius: 0.312rem;
            font-size: 1rem;
            float: right;
        }

            .box input[type="submit"]:hover {
                background-color: #287ae6;
                box-shadow: 0 1px 1px 0 rgba(66,133,244,0.45), 0 1px 3px 1px rgba(66,133,244,0.3);
            }
</style>
<div class="dashboard-main">
    <div class="top-header p-4  border-bottom">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-2 d-flex justify-content-center">
                    <img src="images/logo.png" alt="logo">


                </div>
                @*<label style="float:right">Login</label>
                    <label style="margin-left:20px">Register</label>*@

                <!-- <div class="col-lg-5 d-flex align-items-center m-auto">
                    <p class="m-0">Welcome, <span>Admin User</span> | System Admin, <span>HR and Admin</span> | My Account | <span style="color: rgb(255, 208, 0)">Logout</span> </p>
                </div> -->

            </div>

        </div>

    </div>
    @*@Body*@
    <div class="login-main">
        <div class="login-main-wrapper">
            <div class="container-fluid">
                <div class="box">
                    <div class="logo">
                        <h2>Sign In</h2>
                    </div>
                    
                    
                    <EditForm Model="usermodel" OnValidSubmit="UserLogin">
                        <div class="inputBox">
                            <InputText type="email" name="email" @bind-Value="@usermodel.LOGIN_ID" required onkeyup="this.setAttribute('value', this.value);"></InputText>
                            <label>Username</label>
                        </div>
                        <div class="inputBox">
                            <InputText type="text" name="text" @bind-Value="@usermodel.PASSWORD" required onkeyup="this.setAttribute('value', this.value);"></InputText>
                            <label>Passward</label>
                        </div>
                        @*<div class="form-group row">
                <div class="col-sm-12">
                    <InputText class="form-control form-control-md" @bind-Value="@usermodel.LOGIN_ID" placeholder="Email"></InputText>
                </div>
            </div>
            <div class="form-group row">
                <div class="col-sm-12">
                    <InputText class="form-control form-control-md" type="password" @bind-Value="@usermodel.PASSWORD" placeholder="Password"></InputText>
                </div>
            </div>*@

                        <div class="form-group row">
                            <div class="col-sm-10">
                                <button type="submit" class="btn btn-primary btn-block" style="width:150px">Sign in</button>
                                <br />
                                <input style="width:20px" type="checkbox" /> Remember Password | &nbsp;
                                <a href="#">Forgot Password ?</a>
                            </div>
                        </div>
                    </EditForm>
                </div>
                </div>
            </div>

    </div>


    <footer>
        <h6 class="text-center m-0">Copyright &copy; All rights reserved.</h6>
    </footer>
</div>
@*<div class="box">
        <div class="logo">

        </div>
        <h2>Sign In</h2>

        <form>
            <div class="inputBox">
                <input type="email" name="email" required onkeyup="this.setAttribute('value', this.value);" value="">
                <label>Username</label>
            </div>
            <div class="inputBox">
                <input type="text" name="text" required onkeyup="this.setAttribute('value', this.value);" value="">
                <label>Passward</label>
            </div>
            <input type="submit" name="sign-in" value="Sign In">
        </form>
    </div>

    <footer>
        <h6 class="text-center m-0">Copyright &copy; All rights reserved.</h6>
    </footer>*@




@code {

    UserModel usermodel = new UserModel();
    UserModel loginUser = new UserModel();
    string message;
    ClaimsPrincipal claimsPrincipal;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected async override Task OnInitializedAsync()
    {
        //usermodel = new UserModel();

        //claimsPrincipal = (await authenticationStateTask).User;

        //if (claimsPrincipal.Identity.IsAuthenticated)
        //{
        //    UriHelper.NavigateTo("/Home");
        //}
        //if(await sessionStorage.GetItemAsync<string>("session_employeeLoginId")!=null)
        //{ UriHelper.NavigateTo("/Home"); }
        //else { UriHelper.NavigateTo("/"); }

        //{
        //    usermodel.LOGIN_ID = "philip.cramer@gmail.com";
        //    usermodel.PASSWORD = "philip.cramer";
        //}

    }
    private async Task UserLogin()
    {
        try
        {
            if (usermodel.LOGIN_ID == null || usermodel.LOGIN_ID == "" || usermodel.PASSWORD == null || usermodel.PASSWORD == "")
            {
                await js.InvokeVoidAsync("alert", " User Name or Password Is Empty");
                return;
            }
            else
            {
                loginUser = await Http.PostJsonAsync<UserModel>(Utility.BaseUrl + "api/Authentication/UserLogin", usermodel);
                if (loginUser.PASSWORD != usermodel.PASSWORD)
                {
                    await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
                    return;
                }
                await sessionStorage.SetItemAsync("session_employeeName", loginUser.EMPLOYEE_NAME);
                await sessionStorage.SetItemAsync("session_employeeId", loginUser.EMPLOYEE_ID);
                await sessionStorage.SetItemAsync("session_employeeDesignation", loginUser.DESIGNATION);
                await sessionStorage.SetItemAsync("session_employeeDepartment", loginUser.DEPARTMENT_NAME);
                await sessionStorage.SetItemAsync("session_employeeDepartmentId", loginUser.DEPARTMENT_ID);
                await sessionStorage.SetItemAsync("session_employeeLoginId", loginUser.LOGIN_ID);
                await sessionStorage.SetItemAsync("session_userRoleId", loginUser.USER_ROLE_ID);
                await sessionStorage.SetItemAsync("session_userId", loginUser.USER_ID);

                UriHelper.NavigateTo("/Home");
            }
        }
        catch (Exception ex)
        {

        }

    }
}
