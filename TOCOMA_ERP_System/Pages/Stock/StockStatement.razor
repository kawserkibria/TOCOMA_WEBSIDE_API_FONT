@page "/StockStatement"
@layout CustomLayout
@inject HttpClient Http
@inject IJSRuntime JSRuntime


<div class="card">
    <div class="card-header">
        <h3>STOCK IN & OUT STATEMENT</h3>

    </div>

    <br />

    <div class="testbox">
        <div class="tablearea">
            <table id="example" class="display" style="width:100%">
                <thead>
                    <tr>
                        <td scope="col" rowspan="2">Date</td>
                        <td scope="col" rowspan="2">Description</td>
                        <td scope="col" rowspan="2">Customer/Supplier Name</td>
                        <td scope="col" rowspan="2">Item Name</td>
                        <td scope="col" rowspan="2">Pack Size</td>
                        <td scope="col" rowspan="2">UOM</td>
                        <td scope="col" colspan="2">Stock In Details</td>
                        <td scope="col" colspan="3">Stock Out Details</td>
                        <td scope="col" rowspan="2">Remarks</td>

                    </tr>
                    <tr>
                        <td scope="col">Quantity</td>
                        <td scope="col">Documents No.</td>
                        <td scope="col">Gate<br /> Pass No.</td>
                        <td scope="col">Delivery<br />Note No.</td>
                        <td scope="col">Quantity</td>

                    </tr>

                </thead>
                <tbody>
                    @if (stockList != null)
                    {
                        foreach (var item in stockList)
                        {
                            string itm = item.ITEM_NAME;
                            string pack = item.PACK_SIZE;
                            string uom = item.UOM;
                            string qty = item.STOCK_IN_QUANTITY;


                            var itemsplitted = itm.Split(",").ToList<string>();
                            var packsplitted = pack.Split(",").ToList<string>();
                            var uomplitted = uom.Split(",").ToList<string>();
                            var qtysplitted = qty.Split(",").ToList<string>();
                            <tr>
                                <td scope="col">@item.TRANSECTION_DATE</td>
                                <td scope="col">@item.DESCRIPTION</td>
                                <td scope="col">@item.CUSTOMER_SUPPLIER</td>

                                <td scope="col" class="i">
                                    @foreach (var s in itemsplitted)
                                    {
                                        @s <br />
                                    }
                                </td>
                                <td scope="col" class="i">
                                    @foreach (var s in packsplitted)
                                    {
                                        @s <br />
                                    }
                                </td>
                                <td scope="col" class="i">
                                    @foreach (var s in uomplitted)
                                    {
                                        @s <br />
                                    }
                                </td>
                                <td scope="col" class="i">
                                    @foreach (var s in qtysplitted)
                                    {
                                        @s <br />
                                    }
                                </td>
                                @*<td scope="col">@item.ITEM_NAME</td>
                                    <td scope="col">@item.PACK_SIZE</td>
                                    <td scope="col">@item.UOM</td>
                                    <td scope="col">@item.STOCK_IN_QUANTITY</td>*@


                                <td scope="col">@item.DOCUMENTS_NO</td>
                                <td scope="col">@item.GATE_PASS_NO</td>
                                <td scope="col">@item.DELIVERY_NOTE_NO</td>
                                <td scope="col">@item.STOCK_OUT_QUANTITY</td>
                                <td scope="col">@item.REMARKS</td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
</div>

@*<style>
    .scroll {
        overflow-x: auto;
        white-space: nowrap;
    }

    table {
        border-collapse: collapse;
    }

    th,
    td {
        border: 1px solid #888;
        padding: 0.25em 0.5em;
    }
</style>*@



@code {
    List<PurchaseOrderViewModel> poList = new List<PurchaseOrderViewModel>();
    List<PurchaseOrderViewModel> pOrderView = new List<PurchaseOrderViewModel>();
    PurchaseOrderViewModel poModel = new PurchaseOrderViewModel();
    List<StockModel> stockList = new List<StockModel>();
    DateTime PO_FROM_DATE = System.DateTime.Now;
    DateTime PO_TO_DATE = System.DateTime.Now;
    string reportType;

    protected override async Task OnInitializedAsync()
    {
        await GetStock();
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
    private async Task GetStock()
    {
        stockList = await Http.GetJsonAsync<List<StockModel>>(Utility.BaseUrl + "api/Stock/GetStockStatement");
    }

    protected async Task GetData()
    {
        if (reportType == "2")
        {
            //await GetPODetailsItemByPOID(PO_FROM_DATE, PO_TO_DATE);
            pOrderView = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderIdByPurchaseDate/" + PO_FROM_DATE + "/" + PO_TO_DATE);
        }
        else if (reportType == "3")
        {
            await GetDailyPurchaseStatement(PO_FROM_DATE, PO_TO_DATE);
        }

    }
    private async Task PrintOption()
    {
        if (reportType == "1") { await Http.PostJsonAsync("https://localhost:44350/Report/PurchaseOrder", poModel); }
        else if (reportType == "2")
        {
            await GetPODetailsItemByPOID(PO_FROM_DATE, PO_TO_DATE);
            await Http.PostJsonAsync("https://localhost:44350/Report/PurchaseOrderTracker", pOrderView);
        }
        else if (reportType == "3")
        {
            await GetDailyPurchaseStatement(PO_FROM_DATE, PO_TO_DATE);
            await Http.PostJsonAsync("https://localhost:44350/Report/PurchaseOrderTracker", pOrderView);
        }
    }
    private async Task GetDailyPurchaseStatement(DateTime date1, DateTime date2)
    {
        pOrderView = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetDailyPurchaseStatementByDate/" + date1 + "/" + date2);
    }
    private async Task GetPODetailsItemByPOID(DateTime date1, DateTime date2)
    {
        //pOrderView = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderByPOId/" + poId);
        pOrderView = await Http.GetJsonAsync<List<PurchaseOrderViewModel>>(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderIdByPurchaseDate/" + date1 + "/" + date2);

        //foreach (var p in pOrderView)
        //{
        //    //purchaseOrderDetailsListByPO_Id = new List<PurchaseOrderDetailsEntity>();
        //    //purchaseOrderDetailsListByPO_Id = await Http.GetJsonAsync<List<PurchaseOrderDetailsEntity>>(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderDetailsByPO_ID/" + p.PO_ID);
        //    if (!checkedPOIds.Contains(Convert.ToString(p.PO_ID)))
        //    {
        //        checkedPOIds.Add(Convert.ToString(p.PO_ID));
        //    }
        //    str = String.Join(",", checkedPOIds);

        //    //p.pOrderDetailsList= purchaseOrderDetailsListByPO_Id.FindAll(x => x.PO_ID == p.PO_ID);

        //    //p.pOrderDetailsList = await Http.GetJsonAsync<List<PurchaseOrderDetailsEntity>>(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderDetailsByPO_ID/" + poId);
        //}
        //purchaseOrderDetailsListByPO_Id = await Http.GetJsonAsync<List<PurchaseOrderDetailsEntity>>(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderDetailsBYPO_ID_IN/" + str);
        //foreach (var p in pOrderView)
        //{
        //    p.pOrderDetailsList = new List<PurchaseOrderDetailsEntity>();
        //    p.pOrderDetailsList = purchaseOrderDetailsListByPO_Id.FindAll(x => x.PO_ID == p.PO_ID);

        //}
        ////p.pOrderDetailsList = purchaseOrderDetailsListByPO_Id.FindAll(x => x.PO_ID == p.PO_ID);
        this.StateHasChanged();


    }
    async void CheckboxClicked(string poId, object checkedValue)
    {
        if ((bool)checkedValue)
        {
            await GetPOItemByPOID(poId);
            //if (!checkedBrandIds.Contains(poId))
            //{
            //    checkedBrandIds.Add(poId);
            //}
        }
        //else
        //{
        //    if (checkedBrandIds.Contains(poId))
        //    {
        //        checkedBrandIds.Remove(poId);
        //    }
        //}
        //str = String.Join(",", checkedBrandIds);



    }
    protected async void ReportType_Clicked(ChangeEventArgs categoryevent)
    {
        //pOrderView.REPORT_TYPE = categoryevent.Value.ToString();
        reportType = categoryevent.Value.ToString();
        this.StateHasChanged();
    }
    private async Task GetPOItemByPOID(string poId)
    {
        poModel = await Http.GetJsonAsync<PurchaseOrderViewModel>(Utility.BaseUrl + "api/Purchase/GetPurchaseOrderByPOId/" + poId);
    }
}








