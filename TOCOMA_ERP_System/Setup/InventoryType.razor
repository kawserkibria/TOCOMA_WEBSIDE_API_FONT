@page "/InventoryType"
@layout CustomLayout
@inject HttpClient Http
@inject IToastService toastService
@inject IJSRuntime JSRuntime

<div class="card">
    <div class="card-header">
        <h3>Inventory Type</h3>
    </div>

    <br />
    <EditForm Model="@inventoryType" style="height:20%;margin-left:10px">
        <div class="row">
            <div class="col-md-2"><label><b>Type Name:</b></label></div>
            <div class="col-md-7">
                <InputText @bind-Value="@inventoryType.INVENTORY_TYPE" style="width:500px"></InputText>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-2"></div>
            <div class="col-md-7">
                <button type="submit" @onclick="SaveInventoryType" class="btn btn-info" style="width:120px;margin-right:10px">@submit</button>
                <button type="button" @onclick="Cancel" class="btn btn-danger" style="width:90px">Cancel</button>


            </div>
        </div>

    </EditForm>

    <br />

    <div class="testbox">
        <div class="tablearea">
            <table id="example" class="display" style="width:100%">
                <thead>
                    <tr>
                        <th style="width:40px"></th>
                        <th style="width:40px"></th>
                        <td>Inventory Type</td>
                    </tr>

                </thead>
                <tbody>
                    @if (inventoryTypeList != null)
                    {
                        foreach (var item in inventoryTypeList)
                        {
                            <tr>
                                <td style="text-align:center"><a style="color:red" @onclick=@(() => Delete(item.INVENTORY_TYPE_ID))><span class="oi oi-trash"></span></a></td>
                                <td style="text-align:center"><a data-toggle="modal" data-target=".bd-example-modal-lg" href="#" @onclick=@(() => EditBrand(item.INVENTORY_TYPE_ID))><span class="oi oi-pencil"></span></a></td>
                                <td>@item.INVENTORY_TYPE</td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
</div>



@code {
    List<InventoryTypeModel> inventoryTypeList = new List<InventoryTypeModel>();
    InventoryTypeModel inventoryType = new InventoryTypeModel();
    string submit = "Save";
    protected override async Task OnInitializedAsync()
    {
        await GetInventoryType();
        StateHasChanged();
        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
    private async Task GetInventoryType()
    {
        inventoryTypeList = await Http.GetJsonAsync<List<InventoryTypeModel>>(Utility.BaseUrl + "api/Setup/GetInventoryType");
    }
    public async Task SaveInventoryType()
    {        
        if (IsValidation_InventoryType() != true)
        {
            try
            {
                if (submit == "Save")
                {
                    inventoryType.Operation_Type = 1;
                    var data = await Http.PostJsonAsync<InventoryTypeModel>(Utility.BaseUrl + "api/Setup/AddInventoryType", inventoryType);
                    toastService.ShowSuccess("Insert Successfully!!!");
                }
                else if (submit == "Update")
                {
                    inventoryType.Operation_Type = 2;
                    var data = await Http.PutJsonAsync<InventoryTypeModel>(Utility.BaseUrl + "api/Setup/UpdateInventoryType", inventoryType);
                    toastService.ShowSuccess("Update Successfully!!!");
                }
                await Cancel();
            }
            catch (Exception ex)
            {

            }

        }
        await GetInventoryType();
    }
    private bool IsValidation_InventoryType()
    {
        bool flag = false;
        if (inventoryType.INVENTORY_TYPE == "" || inventoryType.INVENTORY_TYPE == string.Empty || inventoryType.INVENTORY_TYPE == null)
        {
            toastService.ShowWarning("Inventory Type Name cannot be empty!");
            flag = true;
        }

        return flag;
    }
    private async Task Cancel()
    {
        inventoryType = new InventoryTypeModel();
        submit = "Save";
    }
    private async Task Delete(int Id)
    {

        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
            return;

        await Http.DeleteAsync(Utility.BaseUrl + "api/Setup/DeleteInventoryType/" + Id);
        await GetInventoryType();
    }
    private async Task EditBrand(int Id)
    {
        submit = "Update";
        inventoryType = new InventoryTypeModel();
        inventoryType.INVENTORY_TYPE = inventoryTypeList.Find(x => x.INVENTORY_TYPE_ID == Id).INVENTORY_TYPE;
        inventoryType.INVENTORY_TYPE_ID = Id;
        inventoryType.Operation_Type = 2;
    }
}
