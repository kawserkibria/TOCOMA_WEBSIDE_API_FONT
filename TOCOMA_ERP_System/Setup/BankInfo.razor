@page "/BankInfo"

@layout CustomLayout
@inject HttpClient Http
@inject IToastService toastService
@inject IJSRuntime JSRuntime



<div class="card">
    <div class="card-header">
        Bank Info

    </div>

    <br />
    <EditForm Model="@bank" style="height:20%;margin-left:10px">
        <div class="row">
            <div class="col-md-2"><label>Bank Code:</label></div>
            <div class="col-md-7">
                <InputText @bind-Value="@bank.BANK_CODE" readonly style="width:200px"></InputText>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col-md-2"><label>Bank Name:</label></div>
            <div class="col-md-7">
                <InputText @bind-Value="@bank.BANK_NAME" style="width:500px"></InputText>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-md-2"></div>
            <div class="col-md-7">
                <button type="submit" @onclick="SaveCategory" class="btn btn-info" style="width:120px;margin-right:10px">@submit</button>
                <button type="button" @onclick="Cancel" class="btn btn-danger" style="width:90px">Cancel</button>


            </div>
        </div>

    </EditForm>

    <br />

    <div class="testbox">
        <div class="tablearea">
            <table id="example" class="display" style="width:100%">
                <thead>
                    <tr>
                        <th style="width:40px"></th>
                        <th style="width:40px"></th>
                        <td>Bank Code</td>
                        <td>Bank Name</td>
                    </tr>

                </thead>
                <tbody>
                    @if (bankmodel != null)
                    {
                        foreach (var item in bankmodel)
                        {
                            <tr>
                                <td style="text-align:center"><a style="color:red" @onclick=@(() => DeleteCategory(item.BANK_ID))><span class="oi oi-trash"></span></a></td>
                                <td style="text-align:center"><a data-toggle="modal" data-target=".bd-example-modal-lg" href="#" @onclick=@(() => editCategory(item.BANK_ID))><span class="oi oi-pencil"></span></a></td>
                                <td>@item.BANK_CODE</td>
                                <td>@item.BANK_NAME</td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    BankModel bank = new BankModel();
    List<BankModel> bankmodel = new List<BankModel>();
    string submit = "Save";
    protected override async Task OnInitializedAsync()
    {
        await GetBankInfo();
        StateHasChanged();

        await JSRuntime.InvokeAsync<object>("TestDataTablesAdd", "#example");
    }
    private async Task GetBankInfo()
    {
        bankmodel = await Http.GetJsonAsync<List<BankModel>>(Utility.BaseUrl + "api/Bank");
    }
    public async Task SaveCategory()
    {
        if (IsValidation_Category() != true)
        {
            try
            {
                if (submit == "Save")
                {
                    bank.Operation_Type = 1;
                    var data = await Http.PostJsonAsync<BankModel>(Utility.BaseUrl + "api/Bank", bank);
                    toastService.ShowSuccess("Insert Successfully!!!");
                }
                else if (submit == "Update")
                {
                    var data = await Http.PutJsonAsync<BankModel>(Utility.BaseUrl + "api/Bank", bank);
                    toastService.ShowSuccess("Update Successfully!!!");
                }

                bank = new BankModel();
                submit = "Save";
            }
            catch (Exception ex)
            { }
        }
        await GetBankInfo();
    }
    private async Task Cancel()
    {
        bank = new BankModel();
        submit = "Save";
    }
    private async Task editCategory(int bankId)
    {
        submit = "Update";
        bank = new BankModel();
        bank.BANK_CODE = bankmodel.Find(x => x.BANK_ID == bankId).BANK_CODE;
        bank.BANK_NAME = bankmodel.Find(x => x.BANK_ID == bankId).BANK_NAME;
        bank.BANK_ID = bankId;
        bank.Operation_Type = 2;
    }
    private async Task DeleteCategory(int bankId)
    {

        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete ?"))
            return;

        await Http.DeleteAsync(Utility.BaseUrl + "api/Bank/DeleteBank/" + bankId);
        await GetBankInfo();
    }
    private bool IsValidation_Category()
    {
        bool flag = false;
        if (bank.BANK_NAME == "" || bank.BANK_NAME == string.Empty || bank.BANK_NAME == null)
        {
            toastService.ShowWarning("Bank Name cannot be empty!");
            flag = true;
        }

        return flag;
    }
}
